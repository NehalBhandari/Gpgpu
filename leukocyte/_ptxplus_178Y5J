//HEADER
.version 1.4+
.target sm_10, map_f64_to_f32
//END HEADER


//INSTRUCTIONS

.const .u32 constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[17] = {
          0x0000013f, 0x00010000, 0x000000ff, 0x3f800000, 
          0xbf52c7ea, 0xc0d21907, 0x41e6bd60, 0x419d92c8, 
          0x7f800000, 0x3fc90fdb, 0x80000000, 0x3ea2f98c, 
          0x3dcccccd, 0x00000001, 0x7e800000, 0xfffffc00, 
          0x3e800000
};





.entry  _Z12IMGVF_kernelPPfS0_PiS1_fffif (
	.param  .u64 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_IMGVF_array ,
	.param  .u64 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_I_array ,
	.param  .u64 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_m_array ,
	.param  .u64 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_n_array ,
	.param  .f32 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_vx ,
	.param  .f32 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_vy ,
	.param  .f32 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_e ,
	.param  .s32 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_max_iterations ,
	.param  .f32 __cudaparm__Z12IMGVF_kernelPPfS0_PiS1_fffif_cutoff )
{
	.reg .u32 $r<43>;
	.reg .u32 $ofs<5>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	mov.u32 $r1, $r0;
	cvt.u32.u16 $r0, %ctaid.x;
	shl.u32 $r2, $r0, 0x00000003;
	shl.u32 $r6, $r0, 0x00000002;
	add.u32 $r0, s[0x0010], $r2;
	ld.global.v2.u32 {$r4,$r5}, [$r0];
	add.half.u32 $r5, s[0x0020], $r6;
	add.half.u32 $r0, s[0x0018], $r2;
	ld.global.v2.u32 {$r2,$r3}, [$r0];
	ld.global.u32 $r18, [$r5];
	add.u32 $r0, s[0x0028], $r6;
	ld.global.u32 $r3, [$r0];
	mul.wide.u16 $r0, $r18.lo, $r3.hi;
	mad.wide.u16 $r0, $r18.hi, $r3.lo, $r0;
	shl.u32 $r0, $r0, 0x00000010;
	mad.wide.u16 $r22, $r18.lo, $r3.lo, $r0;
	add.u32 $p0|$r0, $r22, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0000];
	mov.u32 $r6, 0xcccccccd;
	abs.u32 $r5, $r0;
	mul.wide.u16 $r0, $r5.lo, $r6.hi;
	mad.wide.u16 $p1|$r0, $r5.hi, $r6.lo, $r0;
	shl.u32 $r7, $r0, 0x00000010;
	shr.u32 $r0, $r0, 0x00000010;
	mad.wide.u16 $p2|$o127, $r5.lo, $r6.lo, $r7;
	@$p1.cf add.u32 $r0, $r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0004];
	@$p3 mad.wide.u16 $r0, -$r5.hi, $r6.hi, $r0;
	shr.s32 $r5, $r0, 0x00000008;
	add.u32 $r0, -$r5, 0x00000000;
	@$p0.sf mov.u32 $r5, $r0;
	set.gt.s32.s32 $p0/$r0, $r5, $r124;
	cvt.s32.s32 $p2|$o127, $r0;
	@$p2 mov.u32 $r23, $p2;
	@$p0.eq bra l0x00000228;
	shl.u32 $r0, $r5, 0x00000008;
	shl.u32 $r6, $r5, 0x00000006;
	add.u32 $r0, $r0, $r6;
	cvt.u32.u16 $r9, $r1.lo;
	ssy 0x000001f0;
	mov.u32 $r17, $r124;
	add.half.u32 $r16, $r9, $r0;
	mov.half.u32 $r8, $r9;
	l0x00000138: mov.half.u32 $r6, $r3;
	mov.half.u32 $r0, $r9;
	callp l0x00000f00;
	mov.u32 $r6, $r0;
	set.ge.s32.s32 $p0/$o127, $r6, $r18;
	ssy 0x000001c8;
	@$p0.ne bra l0x000001c8;
	mul.wide.u16 $r0, $r6.lo, $r3.hi;
	mad.wide.u16 $r10, $r6.hi, $r3.lo, $r0;
	mov.half.u32 $r7, $r3;
	mov.half.u32 $r0, $r9;
	shl.u32 $r11, $r10, 0x00000010;
	callp l0x00001008;
	mad.wide.u16 $r6, $r6.lo, $r3.lo, $r11;
	add.u32 $r6, $r6, $r0;
	shl.u32 $r0, $r6, 0x00000002;
	add.u32 $r0, $r0, $r4;
	ld.global.u32 $r0, [$r0];
	shl.b32 $ofs1, $r6, 0x00000002;
	mov.u32 s[$ofs1+0x0044], $r0;
	l0x000001c8: nop;
	add.u32 $r9, $r9, 0x00000140;
	set.ne.s32.s32 $p0/$o127, $r9, $r16;
	add.u32 $r17, $r17, 0x00000001;
	@$p0.ne bra l0x00000138;
	shl.u32 $r0, $r17, 0x00000008;
	shl.u32 $r6, $r17, 0x00000006;
	add.half.u32 $r0, $r0, $r6;
	add.half.u32 $r0, $r8, $r0;
	mov.u32 $r6, $r3;
	add.u32 $r0, $r0, 0xfffffec0;
	callp l0x00000f00;
	mov.u32 $r11, $r0;
	l0x00000228: bar.sync 0x00000000;
	cvt.u32.u16 $p0|$o127, $r1.lo;
	@$p0.equ mov.u32 s[0x3928], $r124;
	bar.sync 0x00000000;
	add.u32 $ofs1, $ofs0, 0x00003928;
	set.ne.s32.s32 $p0/$o127, s[$ofs1+0x0000], $r124;
	@$p0.ne bra l0x00000e10;
	set.le.s32.s32 $p0/$o127, s[0x003c], $r124;
	@$p0.ne bra l0x00000e10;
	mov.u32 $r7, $r3;
	mov.u32 $r0, 0x00000140;
	callp l0x00001008;
	mov.u32 $r6, $r0;
	cvt.u32.u16 $r9, $r1.lo;
	mov.half.u32 $r7, $r3;
	mov.half.u32 $r0, $r9;
	add.u32 $r8, $r9, 0x00000d0a;
	callp l0x00001008;
	shl.b32 $ofs1, $r8, 0x00000002;
	mov.u32 $r24, $r124;
	set.gt.s32.s32 $p0/$o127, $r9, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0008];
	set.eq.s32.s32 $p1/$o127, $r9, $r124;
	add.half.u32 $r8, -$r6, $r0;
	mov.half.u32 $r7, $r9;
	l0x000002d8: mov.u32 $r9, $r8;
	mov.pred $p2, $r23;
	@$p2.eq bra l0x00000cb0;
	add.u32 $r0, $r5, 0xffffffff;
	shl.u32 $r10, $r5, 0x00000008;
	shl.u32 $r12, $r5, 0x00000006;
	shl.u32 $r13, $r0, 0x00000008;
	shl.u32 $r0, $r0, 0x00000006;
	add.half.u32 $r12, $r10, $r12;
	add.half.u32 $r13, $r13, $r0;
	cvt.f32.s32 $r0, $r3;
	ssy 0x00000ca0;
	mov.u32 $r10, $r7;
	mov.u32 $r28, $r124;
	rcp.half.f32 $r25, $r0;
	add.half.u32 $r26, $r7, $r12;
	add.u32 $r27, $r7, $r13;
	l0x00000350: add.u32 $r0, $r9, $r6;
	cvt.f32.s32 $r12, $r10;
	mov.half.u32 $r13, $r9;
	mov.half.u32 $r9, $r0;
	mul.half.f32 $r14, $r25, $r12;
	mov.half.u32 $r12, $r11;
	cvt.rz.s32.f32 $r11, $r14;
	set.le.s32.s32 $p2/$o127, $r3, $r0;
	@$p2.ne add.u32 $r9, -$r3, $r0;
	ssy 0x00000bd0;
	mov.u32 $r42, $r11;
	set.lt.s32.s32 $p3/$r0, $r11, $r18;
	cvt.s32.s32 $p2|$o127, $r0;
	@$p3.eq bra l0x00000bc0;
	add.u32 $r0, $r18, 0xffffffff;
	add.u32 $r20, $r42, 0x00000001;
	set.eq.s32.s32 $p3/$o127, $r0, $r42;
	@$p3.ne mov.u32 $r20, $r0;
	add.u32 $r0, $r3, 0xffffffff;
	add.u32 $r29, $r9, 0x00000001;
	set.eq.s32.s32 $p3/$o127, $r0, $r9;
	@$p3.ne mov.u32 $r29, $r0;
	mul.wide.u16 $r0, $r42.lo, $r3.hi;
	mad.wide.u16 $r0, $r42.hi, $r3.lo, $r0;
	shl.u32 $r0, $r0, 0x00000010;
	set.ne.s32.s32 $r16, $r42, $r124;
	add.u32 $r14, $r42, 0xffffffff;
	mad.wide.u16 $r15, $r42.lo, $r3.lo, $r0;
	and.b32 $r19, $r14, $r16;
	add.u32 $r17, $r15, $r9;
	mad24.lo.s32 $r0, $r3, $r19, $r9;
	shl.b32 $ofs2, $r17, 0x00000002;
	shl.b32 $ofs3, $r0, 0x00000002;
	mov.u32 $r0, s[$ofs2+0x0044];
	cvt.f32.f32 $r14, s[0x0038];
	add.f32 $r30, s[$ofs3+0x0044], -$r0;
	rcp.half.f32 $r21, $r14;
	mul.half.f32 $r0, s[0x0034], $r30;
	mul.f32 $r16, $r21, $r0;
	abs.f32 $r14, $r16;
	set.abs.gt.f32.f32 $p3/$o127, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r14, $r16;
	mov.u32 $r0, 0xc0b59883;
	mul.f32 $r31, $r14, $r14;
	mad.f32 $r0, $r31, 0xbf52c7ea, $r0;
	add.f32 $r32, $r31, 0x41355dc0;
	mad.f32 $r0, $r31, $r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r32, $r31, $r32, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r0, $r31, $r0;
	mad.f32 $r31, $r31, $r32, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r0, $r14, $r0;
	rcp.half.f32 $r31, $r31;
	mad.f32 $r0, $r0, $r31, $r14;
	@$p3.ne add.f32 $r0, -$r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	set.ne.s32.s32 $r32, $r9, $r124;
	add.u32 $r31, $r9, 0xffffffff;
	mad24.lo.s32 $r14, $r3, $r20, $r9;
	and.b32 $r34, $r31, $r32;
	shl.b32 $ofs4, $r14, 0x00000002;
	add.u32 $r31, $r15, $r34;
	mov.u32 $r14, s[$ofs2+0x0044];
	add.u32 $r15, $r15, $r29;
	shl.b32 $ofs3, $r31, 0x00000002;
	add.f32 $r31, s[$ofs4+0x0044], -$r14;
	shl.b32 $ofs4, $r15, 0x00000002;
	mov.u32 $r14, s[$ofs2+0x0044];
	mad24.lo.s32 $r33, $r3, $r19, $r29;
	mov.u32 $r15, s[$ofs2+0x0044];
	mad24.lo.s32 $r29, $r3, $r20, $r29;
	add.f32 $r32, s[$ofs3+0x0044], -$r14;
	shl.b32 $ofs3, $r33, 0x00000002;
	add.f32 $r33, s[$ofs4+0x0044], -$r15;
	shl.b32 $ofs4, $r29, 0x00000002;
	mov.u32 $r14, s[$ofs2+0x0044];
	mad24.lo.s32 $r20, $r3, $r20, $r34;
	mov.u32 $r15, s[$ofs2+0x0044];
	mad24.lo.s32 $r19, $r3, $r19, $r34;
	add.f32 $r34, s[$ofs3+0x0044], -$r14;
	shl.b32 $ofs3, $r20, 0x00000002;
	add.f32 $r35, s[$ofs4+0x0044], -$r15;
	shl.b32 $ofs4, $r19, 0x00000002;
	mov.u32 $r14, s[$ofs2+0x0044];
	mov.u32 $r15, s[$ofs2+0x0044];
	shl.u32 $r29, $r17, 0x00000002;
	add.f32 $r36, s[$ofs4+0x0044], -$r14;
	add.f32 $r37, s[$ofs3+0x0044], -$r15;
	set.abs.le.f32.f32 $p3/$o127, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu cvt.f32.f32 $r14, -$r16;
	@$p3.neu and.b32 $r14, $r14, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r14;
	mul.half.f32 $r14, s[0x0034], $r31;
	mul.half.f32 $r16, $r14, $r21;
	abs.f32 $r15, $r16;
	set.abs.gt.f32.f32 $p3/$o127, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r15, $r16;
	mov.u32 $r14, 0xc0b59883;
	mul.f32 $r17, $r15, $r15;
	mad.f32 $r14, $r17, 0xbf52c7ea, $r14;
	add.f32 $r19, $r17, 0x41355dc0;
	mad.f32 $r14, $r17, $r14, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r19, $r17, $r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r14, $r17, $r14;
	mad.f32 $r17, $r17, $r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r14, $r15, $r14;
	rcp.half.f32 $r17, $r17;
	mad.f32 $r15, $r14, $r17, $r15;
	@$p3.ne add.f32 $r15, -$r15, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r14, 0x3f000000;
	mad.f32 $r14, $r0, 0x3ea2f98c, $r14;
	mov.u32 $r0, $r15;
	set.abs.le.f32.f32 $p3/$o127, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu and.b32 $r15, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r15;
	mul.half.f32 $r15, s[0x0030], $r32;
	mul.half.f32 $r17, $r15, $r21;
	abs.f32 $r16, $r17;
	set.abs.gt.f32.f32 $p3/$o127, $r17, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r16, $r17;
	mov.u32 $r15, 0xc0b59883;
	mul.f32 $r19, $r16, $r16;
	mad.f32 $r15, $r19, 0xbf52c7ea, $r15;
	add.f32 $r20, $r19, 0x41355dc0;
	mad.f32 $r15, $r19, $r15, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r20, $r19, $r20, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r15, $r19, $r15;
	mad.f32 $r19, $r19, $r20, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r15, $r16, $r15;
	rcp.half.f32 $r19, $r19;
	mad.f32 $r16, $r15, $r19, $r16;
	@$p3.ne add.f32 $r16, -$r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r15, 0x3f000000;
	mad.f32 $r15, $r0, 0x3ea2f98c, $r15;
	mov.u32 $r0, $r16;
	set.abs.le.f32.f32 $p3/$o127, $r17, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu cvt.f32.f32 $r16, -$r17;
	@$p3.neu and.b32 $r16, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r16;
	mul.half.f32 $r16, s[0x0030], $r33;
	mul.half.f32 $r19, $r16, $r21;
	abs.f32 $r17, $r19;
	set.abs.gt.f32.f32 $p3/$o127, $r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r17, $r19;
	mov.u32 $r16, 0xc0b59883;
	mul.f32 $r20, $r17, $r17;
	mad.f32 $r16, $r20, 0xbf52c7ea, $r16;
	add.f32 $r38, $r20, 0x41355dc0;
	mad.f32 $r16, $r20, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r38, $r20, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r16, $r20, $r16;
	mad.f32 $r20, $r20, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r16, $r17, $r16;
	rcp.half.f32 $r20, $r20;
	mad.f32 $r17, $r16, $r20, $r17;
	@$p3.ne add.f32 $r17, -$r17, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r16, 0x3f000000;
	mad.f32 $r16, $r0, 0x3ea2f98c, $r16;
	mov.u32 $r0, $r17;
	set.abs.le.f32.f32 $p3/$o127, $r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu and.b32 $r17, $r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r17;
	mov.half.u32 $r17, s[0x0034];
	add.half.f32 $r17, s[0x0030], -$r17;
	mul.half.f32 $r17, $r17, $r34;
	mul.half.f32 $r20, $r17, $r21;
	abs.f32 $r19, $r20;
	set.abs.gt.f32.f32 $p3/$o127, $r20, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r19, $r20;
	mov.u32 $r17, 0xc0b59883;
	mul.f32 $r38, $r19, $r19;
	mad.f32 $r17, $r38, 0xbf52c7ea, $r17;
	add.f32 $r39, $r38, 0x41355dc0;
	mad.f32 $r17, $r38, $r17, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r39, $r38, $r39, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r17, $r38, $r17;
	mad.f32 $r38, $r38, $r39, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r17, $r19, $r17;
	rcp.half.f32 $r38, $r38;
	mad.f32 $r19, $r17, $r38, $r19;
	@$p3.ne add.f32 $r19, -$r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r17, 0x3f000000;
	mad.f32 $r17, $r0, 0x3ea2f98c, $r17;
	mov.u32 $r0, $r19;
	set.abs.le.f32.f32 $p3/$o127, $r20, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu and.b32 $r19, $r20, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r19;
	mov.half.u32 $r19, s[0x0034];
	add.half.f32 $r20, s[0x0030], $r19;
	mul.half.f32 $r19, $r20, $r35;
	mul.half.f32 $r38, $r19, $r21;
	abs.f32 $r39, $r38;
	set.abs.gt.f32.f32 $p3/$o127, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r39, $r38;
	mov.u32 $r19, 0xc0b59883;
	mul.f32 $r40, $r39, $r39;
	mad.f32 $r19, $r40, 0xbf52c7ea, $r19;
	add.f32 $r41, $r40, 0x41355dc0;
	mad.f32 $r19, $r40, $r19, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r41, $r40, $r41, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r19, $r40, $r19;
	mad.f32 $r40, $r40, $r41, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r19, $r39, $r19;
	rcp.half.f32 $r40, $r40;
	mad.f32 $r39, $r19, $r40, $r39;
	@$p3.ne add.f32 $r39, -$r39, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r19, 0x3f000000;
	mad.f32 $r19, $r0, 0x3ea2f98c, $r19;
	mov.u32 $r0, $r39;
	set.abs.le.f32.f32 $p3/$o127, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu and.b32 $r38, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r38;
	mul.half.f32 $r20, $r20, $r36;
	mul.half.f32 $r38, $r20, $r21;
	abs.f32 $r39, $r38;
	set.abs.gt.f32.f32 $p3/$o127, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r39, $r38;
	mov.u32 $r20, 0xc0b59883;
	mul.f32 $r40, $r39, $r39;
	mad.f32 $r20, $r40, 0xbf52c7ea, $r20;
	add.f32 $r41, $r40, 0x41355dc0;
	mad.f32 $r20, $r40, $r20, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r41, $r40, $r41, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r20, $r40, $r20;
	mad.f32 $r40, $r40, $r41, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r20, $r39, $r20;
	rcp.half.f32 $r40, $r40;
	mad.f32 $r39, $r20, $r40, $r39;
	@$p3.ne add.f32 $r39, -$r39, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r20, 0x3f000000;
	mad.f32 $r20, $r0, 0x3ea2f98c, $r20;
	mov.u32 $r0, $r39;
	set.abs.le.f32.f32 $p3/$o127, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu cvt.f32.f32 $r38, -$r38;
	@$p3.neu and.b32 $r38, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r38;
	mov.half.u32 $r38, s[0x0030];
	add.half.f32 $r38, s[0x0034], -$r38;
	mul.half.f32 $r38, $r38, $r37;
	mul.half.f32 $r38, $r38, $r21;
	abs.f32 $r39, $r38;
	set.abs.gt.f32.f32 $p3/$o127, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x000c];
	@$p3.ne rcp.abs.f32 $r39, $r38;
	mov.u32 $r21, 0xc0b59883;
	mul.f32 $r40, $r39, $r39;
	mad.f32 $r21, $r40, 0xbf52c7ea, $r21;
	add.f32 $r41, $r40, 0x41355dc0;
	mad.f32 $r21, $r40, $r21, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0014];
	mad.f32 $r41, $r40, $r41, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0018];
	mul.f32 $r21, $r40, $r21;
	mad.f32 $r40, $r40, $r41, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x001c];
	mul.half.f32 $r21, $r39, $r21;
	rcp.half.f32 $r40, $r40;
	mad.f32 $r21, $r21, $r40, $r39;
	@$p3.ne add.f32 $r21, -$r21, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0024];
	cvt.f32.f32 $r0, $r0;
	mov.u32 $r39, 0x3f000000;
	mad.f32 $r39, $r0, 0x3ea2f98c, $r39;
	mov.u32 $r0, $r21;
	set.abs.le.f32.f32 $p3/$o127, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0020];
	@$p3.neu and.b32 $r21, $r38, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0028];
	@$p3.neu or.b32 $r0, $r0, $r21;
	mul.f32 $r15, $r15, $r31;
	mad.f32 $r14, $r30, $r14, $r15;
	mad.f32 $r14, $r32, $r16, $r14;
	mad.f32 $r14, $r33, $r17, $r14;
	mad.f32 $r14, $r34, $r19, $r14;
	mad.f32 $r15, $r35, $r20, $r14;
	cvt.f32.f32 $r14, $r0;
	mov.u32 $r0, 0x3f000000;
	mad.f32 $r15, $r36, $r39, $r15;
	mad.f32 $r0, $r14, 0x3ea2f98c, $r0;
	shl.b32 $ofs2, $r29, 0x0;
	mad.f32 $r14, $r37, $r0, $r15;
	cvt.f32.f32 $r0, s[$ofs2+0x0044];
	cvt.f32.f32 $r16, $r14;
	add.u32 $r14, $r29, $r2;
	ld.global.u32 $r15, [$r14];
	mad.f32 $r14, $r16, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0030], $r0;
	mov.u32 $r0, s[$ofs2+0x0044];
	cvt.f32.f32 $r16, $r15;
	add.f32 $r15, $r14, -$r15;
	mul.f32 $r16, $r16, 0x3e4ccccd;
	cvt.f32.f32 $r14, $r14;
	cvt.f32.f32 $r15, $r15;
	mad.f32 $r14, -$r15, $r16, $r14;
	bra l0x00000bd0;
	l0x00000bc0: mov.u32 $r0, $r124;
	mov.u32 $r14, $r124;
	l0x00000bd0: nop;
	ssy 0x00000c18;
	set.le.s32.s32 $p3/$o127, $r10, $r7;
	@$p3.ne bra l0x00000c18;
	set.le.s32.s32 $p3/$o127, $r18, $r12;
	@$p0.equ mad24.lo.s32 $r12, $r3, $r12, $r13;
	@$p3.equ shl.b32 $ofs2, $r12, 0x00000002;
	@$p3.equ mov.u32 $r12, s[$ofs1+0x0000];
	@$p3.equ mov.u32 s[$ofs2+0x0044], $r12;
	l0x00000c18: nop;
	ssy 0x00000c60;
	set.ge.s32.s32 $p3/$o127, $r10, $r27;
	@$p3.ne bra l0x00000c48;
	mov.u32 s[$ofs1+0x0000], $r14;
	bra l0x00000c60;
	l0x00000c48: @$p0.neu mad24.lo.s32 $r12, -$r42, $r3, $r9;
	@$p2.neu shl.b32 $ofs2, $r12, 0x00000002;
	@$p2.neu mov.u32 s[$ofs2+0x0044], $r14;
	l0x00000c60: nop;
	add.f32 $r0, $r14, -$r0;
	abs.f32 $r0, $r0;
	add.f32 $r28, $r28, $r0;
	bar.sync 0x00000000;
	add.u32 $r10, $r10, 0x00000140;
	set.ne.s32.s32 $p2/$o127, $r10, $r26;
	@$p2.ne bra l0x00000350;
	nop;
	bra l0x00000cb8;
	l0x00000cb0: mov.u32 $r28, $r124;
	l0x00000cb8: mov.u32 s[$ofs1+0x0000], $r28;
	bar.sync 0x00000000;
	@$p0.neu mov.u32 $r0, $ofs1;
	@$p0.neu add.u32 $r0, $r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x003c];
	@$p0.neu shl.b32 $ofs2, $r0, 0x0;
	@$p0.neu mov.u32 $r0, s[$ofs1+0x0000];
	@$p0.neu add.f32 $r0, s[$ofs2+0x0000], $r0;
	@$p0.neu mov.u32 s[$ofs2+0x0000], $r0;
	bar.sync 0x00000000;
	mov.u32 $r9, 0x00000080;
	l0x00000d08: set.le.s32.s32 $p2/$o127, $r9, $r7;
	@$p2.equ add.u32 $r0, $r9, $r7;
	@$p2.equ shl.b32 $ofs2, $r0, 0x00000002;
	@$p2.equ add.u32 $ofs2, $ofs2, 0x00003428;
	@$p2.equ mov.u32 $r0, s[$ofs2+0x0000];
	@$p2.equ add.f32 $r0, s[$ofs1+0x0000], $r0;
	@$p2.equ mov.u32 s[$ofs1+0x0000], $r0;
	bar.sync 0x00000000;
	shr.s32 $r0, $r9, 0x0000001f;
	and.b32 $r0, $r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0034];
	add.u32 $r0, $r0, $r9;
	shr.s32 $r9, $r0, 0x00000001;
	set.gt.s32.s32 $p2/$o127, $r9, $r124;
	@$p2.ne bra l0x00000d08;
	ssy 0x00000dd0;
	@$p1.eq bra l0x00000dd0;
	cvt.f32.s32 $r9, $r22;
	mov.u32 $r0, s[$ofs1+0x0000];
	set.abs.gt.f32.f32 $p2/$o127, $r9, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0038];
	@$p2.neu mul.f32 $r0, $r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0040];
	@$p2.neu mul.f32 $r9, $r9, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0040];
	rcp.half.f32 $r9, $r9;
	mul.half.f32 $r0, $r0, $r9;
	set.gt.f32.f32 $p2/$o127, s[0x0040], $r0;
	@$p2.neu mov.u32 $r0, constant1_Z12IMGVF_kernelPPfS0_PiS1_fffif[0x0034];
	@$p2.neu mov.u32 s[0x3928], $r0;
	l0x00000dd0: nop;
	bar.sync 0x00000000;
	add.u32 $ofs2, $ofs0, 0x00003928;
	add.u32 $r24, $r24, 0x00000001;
	set.ne.s32.s32 $p2/$o127, s[$ofs2+0x0000], $r124;
	@$p2.ne bra l0x00000e10;
	set.gt.s32.s32 $p2/$o127, s[0x003c], $r24;
	@$p2.ne bra l0x000002d8;
	l0x00000e10: mov.pred $p2, $r23;
	@$p2.eq retp;
	shl.u32 $r0, $r5, 0x00000008;
	shl.u32 $r2, $r5, 0x00000006;
	add.u32 $r0, $r0, $r2;
	cvt.u32.u16 $r1, $r1.lo;
	add.u32 $r5, $r1, $r0;
	l0x00000e48: mov.half.u32 $r6, $r3;
	mov.half.u32 $r0, $r1;
	callp l0x00000f00;
	mov.u32 $r2, $r0;
	set.ge.s32.s32 $p0/$o127, $r2, $r18;
	ssy 0x00000ed8;
	@$p0.ne bra l0x00000ed8;
	mul.wide.u16 $r0, $r2.lo, $r3.hi;
	mad.wide.u16 $r6, $r2.hi, $r3.lo, $r0;
	mov.half.u32 $r7, $r3;
	mov.half.u32 $r0, $r1;
	shl.u32 $r6, $r6, 0x00000010;
	callp l0x00001008;
	mad.wide.u16 $r2, $r2.lo, $r3.lo, $r6;
	add.u32 $r0, $r2, $r0;
	shl.u32 $r2, $r0, 0x00000002;
	shl.b32 $ofs1, $r0, 0x00000002;
	add.u32 $r2, $r2, $r4;
	mov.u32 $r0, s[$ofs1+0x0044];
	st.global.u32 [$r2], $r0;
	l0x00000ed8: nop;
	add.u32 $r1, $r1, 0x00000140;
	set.ne.s32.s32 $p0/$o127, $r1, $r5;
	@$p0.ne bra l0x00000e48;
	retp;
	l0x00000f00: abs.u32 $r7, $r6;
	cvt.f32.u32 $r10, $r7;
	abs.u32 $r11, $r0;
	rcp.f32 $r12, $r10;
	cvt.rz.f32.u32 $r10, $r11;
	add.u32 $r12, $r12, 0xfffffffe;
	mul.rz.f32 $p0|$r10, $r10, $r12;
	cvt.rz.u32.f32 $r10, $r10;
	mul.wide.u16 $r13, $r7.lo, $r10.hi;
	mad.wide.u16 $r13, $r7.hi, $r10.lo, $r13;
	shl.u32 $r13, $r13, 0x00000010;
	mad.wide.u16 $r13, $r7.lo, $r10.lo, $r13;
	add.u32 $r13, $r11, -$r13;
	cvt.rz.f32.u32 $r13, $r13;
	mul.rz.f32 $p0|$r12, $r13, $r12;
	cvt.rz.u32.f32 $r12, $r12;
	add.u32 $r10, $r10, $r12;
	mul.wide.u16 $r12, $r10.hi, $r7.lo;
	mad.wide.u16 $r12, $r10.lo, $r7.hi, $r12;
	shl.u32 $r12, $r12, 0x00000010;
	mad.wide.u16 $r12, $r10.lo, $r7.lo, $r12;
	add.u32 $r11, -$r12, $r11;
	set.le.u32.u32 $r7, $r7, $r11;
	xor.b32 $r0, $r6, $r0;
	shr.u32 $r0, $r0, 0x0000001f;
	add.u32 $r10, -$r7, $r10;
	cvt.s32.s32 $r7, -$r0;
	xor.b32 $r7, $r7, $r10;
	set.ne.s32.s32 $p0/$o127, $r6, $r124;
	add.u32 $r0, $r0, $r7;
	@$p0.equ not.b32 $r0, $r6;
	retp;
	nop;
	l0x00001008: abs.u32 $r10, $r7;
	cvt.f32.u32 $r12, $r10;
	abs.u32 $r13, $r0;
	rcp.f32 $r14, $r12;
	cvt.rz.f32.u32 $r12, $r13;
	add.u32 $r14, $r14, 0xfffffffe;
	mul.rz.f32 $p0|$r12, $r12, $r14;
	cvt.rz.u32.f32 $r12, $r12;
	mul.wide.u16 $r15, $r10.lo, $r12.hi;
	mad.wide.u16 $r15, $r10.hi, $r12.lo, $r15;
	shl.u32 $r15, $r15, 0x00000010;
	mad.wide.u16 $r15, $r10.lo, $r12.lo, $r15;
	add.u32 $r15, $r13, -$r15;
	cvt.rz.f32.u32 $r15, $r15;
	mul.rz.f32 $p0|$r14, $r15, $r14;
	cvt.rz.u32.f32 $r14, $r14;
	add.u32 $r12, $r12, $r14;
	mul.wide.u16 $r14, $r12.hi, $r10.lo;
	mad.wide.u16 $r14, $r12.lo, $r10.hi, $r14;
	shl.u32 $r14, $r14, 0x00000010;
	mad.wide.u16 $r14, $r12.lo, $r10.lo, $r14;
	add.u32 $r14, -$r14, $r13;
	set.le.u32.u32 $r14, $r10, $r14;
	add.u32 $r12, -$r14, $r12;
	mul.wide.u16 $r14, $r12.hi, $r10.lo;
	mad.wide.u16 $r14, $r12.lo, $r10.hi, $r14;
	shl.u32 $r14, $r14, 0x00000010;
	mad.wide.u16 $r10, $r12.lo, $r10.lo, $r14;
	shr.u32 $r0, $r0, 0x0000001f;
	add.u32 $r12, -$r10, $r13;
	cvt.s32.s32 $r10, -$r0;
	xor.b32 $r10, $r10, $r12;
	set.ne.s32.s32 $p0/$o127, $r7, $r124;
	add.u32 $r0, $r0, $r10;
	@$p0.equ not.b32 $r0, $r7;
	retp;
	nop;

	l_exit: exit;
}
//END INSTRUCTIONS
