//HEADER
.version 1.4+
.target sm_10, map_f64_to_f32
//END HEADER


//INSTRUCTIONS

.const .u32 constant0[2174] = {
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000, 0x00000000, 0x00000000, 
          0x00000000, 0x00000000
};

.const .u32 constant1_Z6kernelv[5] = {
          0x00000001, 0x7e800000, 0x00010000, 0xffffffff, 
          0x3e800000
};



.const .b8 d_unique[8160];
.constptr d_unique, constant0, 536;
.const .b8 d_common_change[16];
.constptr d_common_change, constant0, 0;
.const .b8 d_common[520];
.constptr d_common, constant0, 16;


.entry  _Z6kernelv
{
	.reg .u32 $r<25>;
	.reg .u32 $ofs<5>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	set.ne.s32.s32 $p0/$o127, $r124, constant0[0x0008];
	mov.u32 $r1, $r0;
	@$p0.ne bra l0x00000290;
	cvt.u32.u16 $r0, %ctaid.x;
	shl.u32 $r2, $r0, 0x00000007;
	shl.u32 $r0, $r0, 0x00000005;
	add.u32 $r0, $r2, $r0;
	shl.b32 $ofs1, $r0, 0x0;
	mov.u32 $r3, constant0[$ofs1+0x0244];
	mov.u32 $r2, constant0[$ofs1+0x0238];
	shl.u32 $r3, $r3, 0x00000002;
	add.u32 $r0, $r0, 0x00000218;
	add.u32 $r2, $r2, $r3;
	cvt.u32.u16 $p0|$r4, $r1.lo;
	shl.b32 $ofs1, $r0, 0x0;
	ssy 0x00000118;
	mov.u32 $r3, $r2;
	@$p0.ne bra l0x00000118;
	mov.u32 $r0, constant0[0x0020];
	mov.u32 $r5, constant0[$ofs1+0x0028];
	mul.wide.u16 $r6, $r0.lo, $r5.hi;
	mad.wide.u16 $r6, $r0.hi, $r5.lo, $r6;
	shl.u32 $r6, $r6, 0x00000010;
	mad.wide.u16 $r0, $r0.lo, $r5.lo, $r6;
	add.u32 $r0, $r0, constant0[0x0008];
	shl.u32 $r7, $r5, 0x00000002;
	shl.u32 $r5, $r0, 0x00000002;
	add.u32 $r0, $r7, constant0[$ofs1+0x0000];
	ld.global.u32 $r0, [$r0];
	add.u32 $r6, $r5, constant0[$ofs1+0x0010];
	st.global.u32 [$r6], $r0;
	add.u32 $r0, $r7, constant0[$ofs1+0x0008];
	ld.global.u32 $r0, [$r0];
	add.u32 $r5, $r5, constant0[$ofs1+0x0018];
	st.global.u32 [$r5], $r0;
	l0x00000118: set.ge.s32.s32 $p0/$o127, $r4, constant0[0x00e4];
	ssy 0x00000288;
	@$p0.ne bra l0x00000288;
	mov.u32 $r0, constant0[$ofs1+0x0028];
	shl.u32 $r0, $r0, 0x00000002;
	add.half.u32 $r6, $r0, constant0[$ofs1+0x0000];
	add.half.u32 $r5, $r0, constant0[$ofs1+0x0008];
	l0x00000148: add.u32 $r7, $r4, 0x00000001;
	mov.u32 $r16, constant0[0x00dc];
	mov.u32 $r0, $r7;
	callp l0x00002d70;
	mov.u32 $r8, $r0;
	mov.u32 $r23, constant0[0x00dc];
	mov.u32 $r0, $r7;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r8, $r124;
	add.u32 $r10, $r8, 0xffffffff;
	@$p0.equ mov.u32 $r7, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r10, $r7, constant0[0x00dc];
	ld.global.u32 $r7, [$r5];
	ld.global.u32 $r11, [$r6];
	add.u32 $r8, $r0, $r7;
	mov.u32 $r7, constant0[0x0024];
	add.u32 $r8, $r8, 0xffffffe6;
	mul.wide.u16 $r9, $r7.lo, $r8.hi;
	mad.wide.u16 $r12, $r7.hi, $r8.lo, $r9;
	mov.u32 $r9, constant0[0x00dc];
	shl.u32 $r13, $r12, 0x00000010;
	mul.wide.u16 $r12, $r0.lo, $r9.hi;
	mad.wide.u16 $r13, $r7.lo, $r8.lo, $r13;
	mad.wide.u16 $r7, $r0.hi, $r9.lo, $r12;
	add.u32 $r8, $r10, $r11;
	shl.u32 $r7, $r7, 0x00000010;
	add.u32 $r8, $r13, $r8;
	mad.wide.u16 $r0, $r0.lo, $r9.lo, $r7;
	add.u32 $r7, $r8, 0xffffffe6;
	add.u32 $r0, $r0, $r10;
	shl.u32 $r8, $r7, 0x00000002;
	shl.u32 $r7, $r0, 0x00000002;
	add.u32 $r0, $r8, constant0[0x0000];
	ld.global.u32 $r0, [$r0];
	add.u32 $r7, $r2, $r7;
	add.u32 $r4, $r4, 0x00000100;
	set.lt.s32.s32 $p0/$o127, $r4, constant0[0x00e4];
	st.global.u32 [$r7], $r0;
	@$p0.ne bra l0x00000148;
	l0x00000288: nop;
	l0x00000290: set.ne.s32.s32 $p1/$r0, $r124, constant0[0x0008];
	cvt.s32.s32 $p0|$o127, $r0;
	mov.u32 $r10, $p0;
	@$p1.eq bra l0x00002a70;
	cvt.u32.u16 $r0, %ctaid.x;
	shl.u32 $r2, $r0, 0x00000007;
	shl.u32 $r0, $r0, 0x00000005;
	add.u32 $r0, $r2, $r0;
	shl.b32 $ofs2, $r0, 0x0;
	mov.u32 $r2, constant0[$ofs2+0x0240];
	add.u32 $r4, $r0, 0x00000218;
	mov.u32 $r3, constant0[$ofs2+0x0218];
	shl.u32 $r2, $r2, 0x00000002;
	mov.u32 $r0, constant0[$ofs2+0x0220];
	shl.b32 $ofs1, $r4, 0x0;
	add.u32 $r9, $r2, $r3;
	ld.global.u32 $r3, [$r9];
	add.u32 $r8, $r0, $r2;
	ld.global.u32 $r0, [$r8];
	ssy 0x00000460;
	mov.u32 $r6, constant0[$ofs2+0x0240];
	cvt.u32.u16 $r7, $r1.lo;
	set.ge.s32.s32 $p0/$o127, $r7, constant0[0x00f4];
	mov.half.u32 $r2, $r7;
	add.half.u32 $r5, $r3, -constant0[0x0010];
	add.u32 $r4, $r0, -constant0[0x0010];
	@$p0.ne bra l0x00000460;
	shl.u32 $r0, $r2, 0x00000002;
	add.u32 $r3, $r0, constant0[$ofs1+0x0030];
	l0x00000370: add.u32 $r11, $r7, 0x00000001;
	mov.u32 $r16, constant0[0x00ec];
	mov.u32 $r0, $r11;
	callp l0x00002d70;
	mov.u32 $r12, $r0;
	mov.u32 $r23, constant0[0x00ec];
	mov.u32 $r0, $r11;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r12, $r124;
	add.u32 $r12, $r12, 0xffffffff;
	@$p0.equ mov.u32 $r11, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r12, $r11, constant0[0x00ec];
	add.u32 $r0, $r0, $r4;
	mov.u32 $r11, constant0[0x0024];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r13, $r11.lo, $r0.hi;
	mad.wide.u16 $r13, $r11.hi, $r0.lo, $r13;
	shl.u32 $r13, $r13, 0x00000010;
	mad.wide.u16 $r11, $r11.lo, $r0.lo, $r13;
	add.half.u32 $r0, $r12, $r5;
	add.half.u32 $r0, $r11, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r0, constant0[0x0000];
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	add.u32 $r7, $r7, 0x00000100;
	st.global.u32 [$r3], $r0;
	set.lt.s32.s32 $p0/$o127, $r7, constant0[0x00f4];
	add.u32 $r3, $r3, 0x00000400;
	@$p0.ne bra l0x00000370;
	l0x00000460: nop;
	bar.sync 0x00000000;
	mov.u32 $r0, constant0[$ofs1+0x002c];
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r4, $r0, constant0[$ofs1+0x0020];
	set.ge.s32.s32 $p0/$o127, $r2, constant0[0x00e4];
	ssy 0x000005a8;
	mov.half.u32 $r5, $r2;
	mov.half.u32 $r3, $r4;
	@$p0.ne bra l0x000005a8;
	add.u32 $r0, $r2, 0x00000004;
	shl.b32 $ofs2, $r0, 0x00000002;
	l0x000004b8: add.u32 $r7, $r5, 0x00000001;
	mov.u32 $r16, constant0[0x00dc];
	mov.u32 $r0, $r7;
	callp l0x00002d70;
	mov.u32 $r11, $r0;
	mov.u32 $r23, constant0[0x00dc];
	mov.u32 $r0, $r7;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r11, $r124;
	add.u32 $r11, $r11, 0xffffffff;
	@$p0.equ mov.u32 $r7, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r11, $r7, constant0[0x00dc];
	add.u32 $r7, -$r0, constant0[0x00dc];
	mov.u32 $r0, constant0[0x00dc];
	add.u32 $r7, $r7, 0xffffffff;
	mul.wide.u16 $r12, $r0.lo, $r7.hi;
	mad.wide.u16 $r12, $r0.hi, $r7.lo, $r12;
	shl.u32 $r12, $r12, 0x00000010;
	mad.wide.u16 $r7, $r0.lo, $r7.lo, $r12;
	add.u32 $r0, -$r11, constant0[0x00dc];
	add.u32 $r0, $r7, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r4, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	add.u32 $r5, $r5, 0x00000100;
	mov.u32 s[$ofs2+=0x0400], $r0;
	set.lt.s32.s32 $p0/$o127, $r5, constant0[0x00e4];
	@$p0.ne bra l0x000004b8;
	l0x000005a8: nop;
	bar.sync 0x00000000;
	set.lt.s32.s32 $p0/$r0, $r2, constant0[0x0104];
	cvt.s32.s32 $p2|$o127, $r0;
	@$p2 mov.u32 $r11, $p2;
	ssy 0x000008b8;
	mov.u32 $r7, $r2;
	@$p0.eq bra l0x000008b8;
	shl.u32 $r0, $r2, 0x00000002;
	add.u32 $r5, $r0, constant0[$ofs1+0x0038];
	l0x000005f8: add.u32 $r13, $r7, 0x00000001;
	mov.u32 $r16, constant0[0x00fc];
	mov.u32 $r0, $r13;
	callp l0x00002d70;
	mov.u32 $r12, $r0;
	mov.u32 $r23, constant0[0x00fc];
	mov.u32 $r0, $r13;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r12, $r124;
	add.u32 $r13, $r0, 0x00000001;
	@$p0.equ mov.u32 $r12, constant0[0x00fc];
	@$p0.equ mov.u32 $r13, $r0;
	add.u32 $r0, $r13, constant0[0x0110];
	add.u32 $r14, $r0, 0x00000001;
	set.gt.s32.s32 $p0/$o127, $r14, constant0[0x00f0];
	mov.u32 $r14, 0x00000001;
	add.u32 $r15, $r0, -constant0[0x00f0];
	@$p0.ne add.u32 $r14, $r15, constant1_Z6kernelv[0x0000];
	set.gt.s32.s32 $p0/$o127, $r0, constant0[0x00e0];
	@$p0.ne mov.u32 $r0, constant0[0x00e0];
	set.lt.s32.s32 $p0/$o127, $r0, $r14;
	ssy 0x00000890;
	@$p0.ne bra l0x00000888;
	add.u32 $r15, $r12, constant0[0x010c];
	add.u32 $r12, $r15, 0x00000001;
	set.gt.s32.s32 $p1/$o127, $r12, constant0[0x00ec];
	mov.u32 $r17, 0x00000001;
	add.u32 $r12, $r15, -constant0[0x00ec];
	mov.u32 $r16, $r15;
	set.gt.s32.s32 $p0/$o127, $r15, constant0[0x00dc];
	@$p1.ne add.u32 $r17, $r12, constant1_Z6kernelv[0x0000];
	@$p0.ne mov.u32 $r16, constant0[0x00dc];
	add.u32 $r18, $r0, 0x00000001;
	mov.u32 $r19, $r124;
	set.ge.s32.s32 $p0/$o127, $r16, $r17;
	l0x00000710: ssy 0x00000860;
	@$p0.eq bra l0x00000860;
	mov.u32 $r12, constant0[0x00ec];
	mov.u32 $r0, constant0[0x0110];
	mul.wide.u16 $r20, $r12.hi, $r0.lo;
	mad.wide.u16 $r20, $r12.lo, $r0.hi, $r20;
	shl.u32 $r20, $r20, 0x00000010;
	mad.wide.u16 $r0, $r12.lo, $r0.lo, $r20;
	mul.wide.u16 $r20, $r13.lo, $r12.hi;
	mad.wide.u16 $r20, $r13.hi, $r12.lo, $r20;
	shl.u32 $r20, $r20, 0x00000010;
	mad.wide.u16 $r20, $r13.lo, $r12.lo, $r20;
	add.u32 $r0, $r20, $r0;
	mul.wide.u16 $r20, $r14.lo, $r12.hi;
	mad.wide.u16 $r20, $r14.hi, $r12.lo, $r20;
	shl.u32 $r20, $r20, 0x00000010;
	mad.wide.u16 $r12, $r14.lo, $r12.lo, $r20;
	add.u32 $r0, -$r12, $r0;
	add.u32 $r20, $r16, 0x00000001;
	add.half.u32 $r12, $r15, -$r17;
	add.half.u32 $r20, $r15, -$r20;
	add.half.u32 $r12, $r12, $r0;
	add.half.u32 $r20, $r0, $r20;
	mov.u32 $r0, constant0[0x00dc];
	mul.wide.u16 $r21, $r14.lo, $r0.hi;
	mad.wide.u16 $r21, $r14.hi, $r0.lo, $r21;
	shl.u32 $r21, $r21, 0x00000010;
	mad.wide.u16 $r0, $r14.lo, $r0.lo, $r21;
	add.u32 $r0, $r0, -constant0[0x00dc];
	add.u32 $r0, $r17, $r0;
	add.u32 $r0, $r0, 0x00000004;
	shl.b32 $ofs2, $r0, 0x00000002;
	shl.u32 $r0, $r12, 0x00000002;
	add.u32 $r21, $r0, constant0[$ofs1+0x0030];
	l0x00000810: ld.global.u32 $r22, [$r21];
	mov.u32 $r0, $ofs2;
	add.u32 $r0, $r0, 0xfffffffc;
	shl.b32 $ofs3, $r0, 0x0;
	mad.f32 $r19, s[$ofs3+0x0000], $r22, $r19;
	add.u32 $r12, $r12, 0xffffffff;
	add.u32 $ofs2, $ofs2, 0x00000004;
	add.u32 $r21, $r21, 0xfffffffc;
	set.ne.s32.s32 $p1/$o127, $r12, $r20;
	@$p1.ne bra l0x00000810;
	l0x00000860: nop;
	add.u32 $r14, $r14, 0x00000001;
	set.ne.s32.s32 $p1/$o127, $r18, $r14;
	@$p1.ne bra l0x00000710;
	bra l0x00000890;
	l0x00000888: mov.u32 $r19, $r124;
	l0x00000890: st.global.u32 [$r5], $r19;
	add.u32 $r7, $r7, 0x00000100;
	set.lt.s32.s32 $p0/$o127, $r7, constant0[0x0104];
	add.u32 $r5, $r5, 0x00000400;
	@$p0.ne bra l0x000005f8;
	l0x000008b8: nop;
	bar.sync 0x00000000;
	set.lt.s32.s32 $p0/$r0, $r2, constant0[0x0124];
	ssy 0x00000a98;
	mov.u32 $r14, $r2;
	cvt.s32.s32 $p3|$o127, $r0;
	@$p3 mov.u32 $r12, $p3;
	@$p0.eq bra l0x00000a98;
	mov.u32 $r0, 0xffffffff;
	shl.u32 $r5, $r2, 0x00000002;
	add.u32 $r7, $r0, constant0[0x0114];
	add.u32 $r5, $r5, constant0[$ofs1+0x0048];
	l0x00000918: nop;
	add.u32 $r13, $r14, 0x00000001;
	mov.u32 $r16, constant0[0x011c];
	mov.u32 $r0, $r13;
	callp l0x00002d70;
	mov.u32 $r15, $r0;
	mov.u32 $r23, constant0[0x011c];
	mov.u32 $r0, $r13;
	callp l0x00002e98;
	add.u32 $r16, $r15, 0xffffffff;
	set.ne.s32.s32 $p0/$o127, $r15, $r124;
	@$p0.equ mov.u32 $r13, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r16, $r13, constant0[0x011c];
	set.ge.s32.s32 $p0/$o127, $r7, $r16;
	@$p0.ne bra l0x00000a60;
	mov.u32 $r13, constant0[0x00ec];
	add.u32 $r13, $r13, constant0[0x0114];
	set.ge.s32.s32 $p0/$o127, $r16, $r13;
	@$p0.ne bra l0x00000a60;
	mov.u32 $r13, 0xffffffff;
	add.u32 $r13, $r13, constant0[0x0118];
	set.le.s32.s32 $p0/$o127, $r0, $r13;
	@$p0.ne bra l0x00000a60;
	mov.u32 $r13, constant0[0x00f0];
	add.u32 $r13, $r13, constant0[0x0118];
	set.ge.s32.s32 $p0/$o127, $r0, $r13;
	@$p0.ne bra l0x00000a60;
	add.u32 $r0, $r0, -constant0[0x0118];
	mov.u32 $r13, constant0[0x00ec];
	mul.wide.u16 $r15, $r13.lo, $r0.hi;
	mad.wide.u16 $r15, $r13.hi, $r0.lo, $r15;
	shl.u32 $r15, $r15, 0x00000010;
	mad.wide.u16 $r13, $r13.lo, $r0.lo, $r15;
	add.u32 $r0, $r16, -constant0[0x0114];
	add.u32 $r0, $r13, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r0, constant0[$ofs1+0x0030];
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r5], $r0;
	bra l0x00000a78;
	l0x00000a60: mov.u32 $r0, 0x00000000;
	st.global.u32 [$r5], $r0;
	bra l0x00000a78;
	l0x00000a78: add.u32 $r14, $r14, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	set.lt.s32.s32 $p0/$o127, $r14, constant0[0x0124];
	@$p0.ne bra l0x00000918;
	l0x00000a98: nop;
	bar.sync 0x00000000;
	ssy 0x00000ba0;
	mov.u32 $r5, $r2;
	set.lt.s32.s32 $p0/$r0, $r2, constant0[0x0120];
	cvt.s32.s32 $p3|$o127, $r0;
	@$p3 mov.u32 $r13, $p3;
	@$p0.eq bra l0x00000ba0;
	mov.u32 $r0, constant0[0x011c];
	mul.wide.u16 $r7, $r2.lo, $r0.hi;
	mad.wide.u16 $r7, $r2.hi, $r0.lo, $r7;
	shl.u32 $r7, $r7, 0x00000010;
	mad.wide.u16 $r7, $r2.lo, $r0.lo, $r7;
	shl.u32 $r14, $r0, 0x00000008;
	l0x00000b08: add.u32 $r15, $r7, constant0[0x011c];
	ssy 0x00000b80;
	mov.u32 $r0, $r7;
	set.le.s32.s32 $p0/$o127, $r15, $r7;
	@$p0.ne bra l0x00000b80;
	shl.u32 $r16, $r7, 0x00000002;
	mov.u32 $r17, $r124;
	add.u32 $r16, $r16, constant0[$ofs1+0x0048];
	l0x00000b48: ld.global.u32 $r18, [$r16];
	add.f32 $r17, $r18, $r17;
	st.global.u32 [$r16], $r17;
	add.u32 $r0, $r0, 0x00000001;
	add.u32 $r16, $r16, 0x00000004;
	set.ne.s32.s32 $p0/$o127, $r15, $r0;
	@$p0.ne bra l0x00000b48;
	l0x00000b80: add.u32 $r7, $r7, $r14;
	add.u32 $r5, $r5, 0x00000100;
	set.lt.s32.s32 $p0/$o127, $r5, constant0[0x0120];
	@$p0.ne bra l0x00000b08;
	l0x00000ba0: nop;
	bar.sync 0x00000000;
	ssy 0x00000cf0;
	mov.u32 $r17, $r2;
	set.lt.s32.s32 $p0/$r0, $r2, constant0[0x0134];
	cvt.s32.s32 $p3|$o127, $r0;
	@$p3 mov.u32 $r14, $p3;
	@$p0.eq bra l0x00000cf0;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r15, constant0[$ofs1+0x0048];
	add.u32 $r7, $r0, constant0[$ofs1+0x0050];
	l0x00000bf8: add.u32 $r5, $r17, 0x00000001;
	mov.u32 $r16, constant0[0x012c];
	mov.u32 $r0, $r5;
	callp l0x00002d70;
	mov.u32 $r18, $r0;
	mov.u32 $r23, constant0[0x012c];
	mov.u32 $r0, $r5;
	callp l0x00002e98;
	add.u32 $r16, $r18, 0xffffffff;
	set.ne.s32.s32 $p0/$o127, $r18, $r124;
	@$p0.equ mov.u32 $r5, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r16, $r5, constant0[0x012c];
	add.u32 $r0, $r0, constant0[0x0144];
	mov.u32 $r5, constant0[0x011c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r18, $r5.lo, $r0.hi;
	mad.wide.u16 $r18, $r5.hi, $r0.lo, $r18;
	shl.u32 $r18, $r18, 0x00000010;
	mad.wide.u16 $r5, $r5.lo, $r0.lo, $r18;
	add.u32 $r0, $r16, constant0[0x013c];
	add.u32 $r0, $r5, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r15, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r7], $r0;
	add.u32 $r17, $r17, 0x00000100;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p0/$o127, $r17, constant0[0x0134];
	@$p0.ne bra l0x00000bf8;
	l0x00000cf0: nop;
	bar.sync 0x00000000;
	ssy 0x00000e38;
	mov.u32 $r17, $r2;
	set.lt.s32.s32 $p0/$r0, $r2, constant0[0x0164];
	cvt.s32.s32 $p1|$o127, $r0;
	@$p0.eq bra l0x00000e38;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r15, constant0[$ofs1+0x0048];
	add.u32 $r7, $r0, constant0[$ofs1+0x0058];
	l0x00000d40: add.u32 $r5, $r17, 0x00000001;
	mov.u32 $r16, constant0[0x015c];
	mov.u32 $r0, $r5;
	callp l0x00002d70;
	mov.u32 $r18, $r0;
	mov.u32 $r23, constant0[0x015c];
	mov.u32 $r0, $r5;
	callp l0x00002e98;
	add.u32 $r16, $r18, 0xffffffff;
	set.ne.s32.s32 $p0/$o127, $r18, $r124;
	@$p0.equ mov.u32 $r5, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r16, $r5, constant0[0x015c];
	add.u32 $r0, $r0, constant0[0x0154];
	mov.u32 $r5, constant0[0x011c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r18, $r5.lo, $r0.hi;
	mad.wide.u16 $r18, $r5.hi, $r0.lo, $r18;
	shl.u32 $r18, $r18, 0x00000010;
	mad.wide.u16 $r5, $r5.lo, $r0.lo, $r18;
	add.u32 $r0, $r16, constant0[0x014c];
	add.u32 $r0, $r5, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r15, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r7], $r0;
	add.u32 $r17, $r17, 0x00000100;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p0/$o127, $r17, constant0[0x0164];
	@$p0.ne bra l0x00000d40;
	l0x00000e38: nop;
	bar.sync 0x00000000;
	ssy 0x00000eb8;
	mov.u32 $r0, $r2;
	@$p1.eq bra l0x00000eb8;
	shl.u32 $r5, $r2, 0x00000002;
	add.half.u32 $r7, $r5, constant0[$ofs1+0x0058];
	add.half.u32 $r5, $r5, constant0[$ofs1+0x0050];
	l0x00000e70: ld.global.u32 $r16, [$r5];
	ld.global.u32 $r15, [$r7];
	add.f32 $r15, $r16, -$r15;
	st.global.u32 [$r7], $r15;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p0/$o127, $r0, constant0[0x0164];
	@$p0.ne bra l0x00000e70;
	l0x00000eb8: nop;
	bar.sync 0x00000000;
	ssy 0x00000fa0;
	mov.u32 $r0, $r2;
	set.lt.s32.s32 $p0/$r5, $r2, constant0[0x015c];
	cvt.s32.s32 $p3|$o127, $r5;
	@$p3 mov.u32 $r15, $p3;
	@$p0.eq bra l0x00000fa0;
	l0x00000ef8: add.u32 $r7, $r0, constant0[0x0164];
	ssy 0x00000f80;
	mov.u32 $r5, $r0;
	set.le.s32.s32 $p0/$o127, $r7, $r0;
	@$p0.ne bra l0x00000f80;
	mov.u32 $r17, constant0[0x015c];
	shl.u32 $r19, $r0, 0x00000002;
	mov.u32 $r16, $r124;
	shl.u32 $r18, $r17, 0x00000002;
	add.u32 $r17, $r19, constant0[$ofs1+0x0058];
	l0x00000f48: ld.global.u32 $r19, [$r17];
	add.f32 $r16, $r19, $r16;
	st.global.u32 [$r17], $r16;
	add.u32 $r5, $r5, constant0[0x015c];
	add.u32 $r17, $r17, $r18;
	set.gt.s32.s32 $p0/$o127, $r7, $r5;
	@$p0.ne bra l0x00000f48;
	l0x00000f80: nop;
	add.u32 $r0, $r0, 0x00000100;
	set.lt.s32.s32 $p0/$o127, $r0, constant0[0x015c];
	@$p0.ne bra l0x00000ef8;
	l0x00000fa0: nop;
	bar.sync 0x00000000;
	ssy 0x000010e8;
	mov.u32 $r5, $r2;
	set.lt.s32.s32 $p0/$r0, $r2, constant0[0x0174];
	cvt.s32.s32 $p2|$o127, $r0;
	@$p0.eq bra l0x000010e8;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r18, constant0[$ofs1+0x0058];
	add.u32 $r17, $r0, constant0[$ofs1+0x0060];
	l0x00000ff0: add.u32 $r7, $r5, 0x00000001;
	mov.u32 $r16, constant0[0x016c];
	mov.u32 $r0, $r7;
	callp l0x00002d70;
	mov.u32 $r24, $r0;
	mov.u32 $r23, constant0[0x016c];
	mov.u32 $r0, $r7;
	callp l0x00002e98;
	add.u32 $r16, $r24, 0xffffffff;
	set.ne.s32.s32 $p0/$o127, $r24, $r124;
	@$p0.equ mov.u32 $r7, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r16, $r7, constant0[0x016c];
	add.u32 $r0, $r0, constant0[0x0184];
	mov.u32 $r7, constant0[0x015c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r19, $r7.lo, $r0.hi;
	mad.wide.u16 $r19, $r7.hi, $r0.lo, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r7, $r7.lo, $r0.lo, $r19;
	add.u32 $r0, $r16, constant0[0x017c];
	add.u32 $r0, $r7, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r18, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r17], $r0;
	add.u32 $r5, $r5, 0x00000100;
	add.u32 $r17, $r17, 0x00000400;
	set.lt.s32.s32 $p0/$o127, $r5, constant0[0x0174];
	@$p0.ne bra l0x00000ff0;
	l0x000010e8: nop;
	bar.sync 0x00000000;
	ssy 0x00001230;
	mov.u32 $r7, $r2;
	set.lt.s32.s32 $p3/$r0, $r2, constant0[0x01a4];
	cvt.s32.s32 $p0|$o127, $r0;
	@$p3.eq bra l0x00001230;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r18, constant0[$ofs1+0x0058];
	add.u32 $r17, $r0, constant0[$ofs1+0x0068];
	l0x00001138: add.u32 $r5, $r7, 0x00000001;
	mov.u32 $r16, constant0[0x019c];
	mov.u32 $r0, $r5;
	callp l0x00002d70;
	mov.u32 $r24, $r0;
	mov.u32 $r23, constant0[0x019c];
	mov.u32 $r0, $r5;
	callp l0x00002e98;
	add.u32 $r16, $r24, 0xffffffff;
	set.ne.s32.s32 $p3/$o127, $r24, $r124;
	@$p3.equ mov.u32 $r5, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r16, $r5, constant0[0x019c];
	add.u32 $r0, $r0, constant0[0x0194];
	mov.u32 $r5, constant0[0x015c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r19, $r5.lo, $r0.hi;
	mad.wide.u16 $r19, $r5.hi, $r0.lo, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r5, $r5.lo, $r0.lo, $r19;
	add.u32 $r0, $r16, constant0[0x018c];
	add.u32 $r0, $r5, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r18, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r17], $r0;
	add.u32 $r7, $r7, 0x00000100;
	add.u32 $r17, $r17, 0x00000400;
	set.lt.s32.s32 $p3/$o127, $r7, constant0[0x01a4];
	@$p3.ne bra l0x00001138;
	l0x00001230: nop;
	bar.sync 0x00000000;
	ssy 0x000012b0;
	mov.u32 $r0, $r2;
	@$p0.eq bra l0x000012b0;
	shl.u32 $r5, $r2, 0x00000002;
	add.half.u32 $r7, $r5, constant0[$ofs1+0x0068];
	add.half.u32 $r5, $r5, constant0[$ofs1+0x0060];
	l0x00001268: ld.global.u32 $r17, [$r5];
	ld.global.u32 $r16, [$r7];
	add.f32 $r16, $r17, -$r16;
	st.global.u32 [$r7], $r16;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p3/$o127, $r0, constant0[0x01a4];
	@$p3.ne bra l0x00001268;
	l0x000012b0: nop;
	bar.sync 0x00000000;
	ssy 0x00001330;
	mov.u32 $r0, $r2;
	set.ge.s32.s32 $p3/$o127, $r2, constant0[0x01b4];
	@$p3.ne bra l0x00001330;
	shl.u32 $r5, $r2, 0x00000002;
	add.half.u32 $r7, $r5, constant0[$ofs1+0x0070];
	add.half.u32 $r5, $r5, constant0[$ofs1+0x0030];
	l0x000012f0: ld.global.u32 $r16, [$r5];
	mul.f32 $r16, $r16, $r16;
	st.global.u32 [$r7], $r16;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p3/$o127, $r0, constant0[0x01b4];
	@$p3.ne bra l0x000012f0;
	l0x00001330: nop;
	bar.sync 0x00000000;
	ssy 0x00001500;
	mov.u32 $r5, $r2;
	mov.pred $p3, $r12;
	@$p3.eq bra l0x00001500;
	mov.u32 $r0, 0xffffffff;
	shl.u32 $r7, $r2, 0x00000002;
	add.u32 $r17, $r0, constant0[0x0114];
	add.u32 $r12, $r7, constant0[$ofs1+0x0048];
	l0x00001380: nop;
	add.u32 $r7, $r5, 0x00000001;
	mov.u32 $r16, constant0[0x011c];
	mov.u32 $r0, $r7;
	callp l0x00002d70;
	mov.u32 $r18, $r0;
	mov.u32 $r23, constant0[0x011c];
	mov.u32 $r0, $r7;
	callp l0x00002e98;
	add.u32 $r16, $r18, 0xffffffff;
	set.ne.s32.s32 $p3/$o127, $r18, $r124;
	@$p3.equ mov.u32 $r7, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r16, $r7, constant0[0x011c];
	set.ge.s32.s32 $p3/$o127, $r17, $r16;
	@$p3.ne bra l0x000014c8;
	mov.u32 $r7, constant0[0x01ac];
	add.u32 $r7, $r7, constant0[0x0114];
	set.ge.s32.s32 $p3/$o127, $r16, $r7;
	@$p3.ne bra l0x000014c8;
	mov.u32 $r7, 0xffffffff;
	add.u32 $r7, $r7, constant0[0x0118];
	set.le.s32.s32 $p3/$o127, $r0, $r7;
	@$p3.ne bra l0x000014c8;
	mov.u32 $r7, constant0[0x01b0];
	add.u32 $r7, $r7, constant0[0x0118];
	set.ge.s32.s32 $p3/$o127, $r0, $r7;
	@$p3.ne bra l0x000014c8;
	add.u32 $r0, $r0, -constant0[0x0118];
	mov.u32 $r7, constant0[0x01ac];
	mul.wide.u16 $r18, $r7.lo, $r0.hi;
	mad.wide.u16 $r18, $r7.hi, $r0.lo, $r18;
	shl.u32 $r18, $r18, 0x00000010;
	mad.wide.u16 $r7, $r7.lo, $r0.lo, $r18;
	add.u32 $r0, $r16, -constant0[0x0114];
	add.u32 $r0, $r7, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r0, constant0[$ofs1+0x0070];
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r12], $r0;
	bra l0x000014e0;
	l0x000014c8: mov.u32 $r0, 0x00000000;
	st.global.u32 [$r12], $r0;
	bra l0x000014e0;
	l0x000014e0: add.u32 $r5, $r5, 0x00000100;
	add.u32 $r12, $r12, 0x00000400;
	set.lt.s32.s32 $p3/$o127, $r5, constant0[0x0124];
	@$p3.ne bra l0x00001380;
	l0x00001500: nop;
	bar.sync 0x00000000;
	ssy 0x000015f8;
	mov.u32 $r5, $r2;
	mov.pred $p3, $r13;
	@$p3.eq bra l0x000015f8;
	mov.u32 $r0, constant0[0x011c];
	mul.wide.u16 $r7, $r2.lo, $r0.hi;
	mad.wide.u16 $r7, $r2.hi, $r0.lo, $r7;
	shl.u32 $r7, $r7, 0x00000010;
	mad.wide.u16 $r7, $r2.lo, $r0.lo, $r7;
	shl.u32 $r12, $r0, 0x00000008;
	l0x00001560: add.u32 $r13, $r7, constant0[0x011c];
	ssy 0x000015d8;
	mov.u32 $r0, $r7;
	set.le.s32.s32 $p3/$o127, $r13, $r7;
	@$p3.ne bra l0x000015d8;
	shl.u32 $r16, $r7, 0x00000002;
	mov.u32 $r17, $r124;
	add.u32 $r16, $r16, constant0[$ofs1+0x0048];
	l0x000015a0: ld.global.u32 $r18, [$r16];
	add.f32 $r17, $r18, $r17;
	st.global.u32 [$r16], $r17;
	add.u32 $r0, $r0, 0x00000001;
	add.u32 $r16, $r16, 0x00000004;
	set.ne.s32.s32 $p3/$o127, $r13, $r0;
	@$p3.ne bra l0x000015a0;
	l0x000015d8: add.u32 $r7, $r7, $r12;
	add.u32 $r5, $r5, 0x00000100;
	set.lt.s32.s32 $p3/$o127, $r5, constant0[0x0120];
	@$p3.ne bra l0x00001560;
	l0x000015f8: nop;
	bar.sync 0x00000000;
	ssy 0x00001738;
	mov.u32 $r5, $r2;
	mov.pred $p3, $r14;
	@$p3.eq bra l0x00001738;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r13, constant0[$ofs1+0x0048];
	add.u32 $r7, $r0, constant0[$ofs1+0x0050];
	l0x00001640: add.u32 $r12, $r5, 0x00000001;
	mov.u32 $r16, constant0[0x012c];
	mov.u32 $r0, $r12;
	callp l0x00002d70;
	mov.u32 $r14, $r0;
	mov.u32 $r23, constant0[0x012c];
	mov.u32 $r0, $r12;
	callp l0x00002e98;
	add.u32 $r16, $r14, 0xffffffff;
	set.ne.s32.s32 $p3/$o127, $r14, $r124;
	@$p3.equ mov.u32 $r12, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r16, $r12, constant0[0x012c];
	add.u32 $r0, $r0, constant0[0x0144];
	mov.u32 $r12, constant0[0x011c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r14, $r12.lo, $r0.hi;
	mad.wide.u16 $r14, $r12.hi, $r0.lo, $r14;
	shl.u32 $r14, $r14, 0x00000010;
	mad.wide.u16 $r12, $r12.lo, $r0.lo, $r14;
	add.u32 $r0, $r16, constant0[0x013c];
	add.u32 $r0, $r12, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r13, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r7], $r0;
	add.u32 $r5, $r5, 0x00000100;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p3/$o127, $r5, constant0[0x0134];
	@$p3.ne bra l0x00001640;
	l0x00001738: nop;
	bar.sync 0x00000000;
	ssy 0x00001870;
	mov.u32 $r7, $r2;
	@$p1.eq bra l0x00001870;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r13, constant0[$ofs1+0x0048];
	add.u32 $r5, $r0, constant0[$ofs1+0x0058];
	l0x00001778: add.u32 $r12, $r7, 0x00000001;
	mov.u32 $r16, constant0[0x015c];
	mov.u32 $r0, $r12;
	callp l0x00002d70;
	mov.u32 $r14, $r0;
	mov.u32 $r23, constant0[0x015c];
	mov.u32 $r0, $r12;
	callp l0x00002e98;
	add.u32 $r16, $r14, 0xffffffff;
	set.ne.s32.s32 $p3/$o127, $r14, $r124;
	@$p3.equ mov.u32 $r12, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p3.equ add.u32 $r16, $r12, constant0[0x015c];
	add.u32 $r0, $r0, constant0[0x0154];
	mov.u32 $r12, constant0[0x011c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r14, $r12.lo, $r0.hi;
	mad.wide.u16 $r14, $r12.hi, $r0.lo, $r14;
	shl.u32 $r14, $r14, 0x00000010;
	mad.wide.u16 $r12, $r12.lo, $r0.lo, $r14;
	add.u32 $r0, $r16, constant0[0x014c];
	add.u32 $r0, $r12, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r13, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r5], $r0;
	add.u32 $r7, $r7, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	set.lt.s32.s32 $p3/$o127, $r7, constant0[0x0164];
	@$p3.ne bra l0x00001778;
	l0x00001870: nop;
	bar.sync 0x00000000;
	ssy 0x000018f0;
	mov.u32 $r0, $r2;
	@$p1.eq bra l0x000018f0;
	shl.u32 $r5, $r2, 0x00000002;
	add.half.u32 $r7, $r5, constant0[$ofs1+0x0058];
	add.half.u32 $r5, $r5, constant0[$ofs1+0x0050];
	l0x000018a8: ld.global.u32 $r13, [$r5];
	ld.global.u32 $r12, [$r7];
	add.f32 $r12, $r13, -$r12;
	st.global.u32 [$r7], $r12;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p1/$o127, $r0, constant0[0x0164];
	@$p1.ne bra l0x000018a8;
	l0x000018f0: nop;
	ssy 0x000019c0;
	mov.u32 $r0, $r2;
	mov.pred $p3, $r15;
	@$p3.eq bra l0x000019c0;
	l0x00001918: add.u32 $r7, $r0, constant0[0x0164];
	ssy 0x000019a0;
	mov.u32 $r5, $r0;
	set.le.s32.s32 $p1/$o127, $r7, $r0;
	@$p1.ne bra l0x000019a0;
	mov.u32 $r12, constant0[0x015c];
	shl.u32 $r15, $r0, 0x00000002;
	mov.u32 $r14, $r124;
	shl.u32 $r13, $r12, 0x00000002;
	add.u32 $r12, $r15, constant0[$ofs1+0x0058];
	l0x00001968: ld.global.u32 $r15, [$r12];
	add.f32 $r14, $r15, $r14;
	st.global.u32 [$r12], $r14;
	add.u32 $r5, $r5, constant0[0x015c];
	add.u32 $r12, $r12, $r13;
	set.gt.s32.s32 $p1/$o127, $r7, $r5;
	@$p1.ne bra l0x00001968;
	l0x000019a0: nop;
	add.u32 $r0, $r0, 0x00000100;
	set.lt.s32.s32 $p1/$o127, $r0, constant0[0x015c];
	@$p1.ne bra l0x00001918;
	l0x000019c0: nop;
	bar.sync 0x00000000;
	ssy 0x00001af8;
	mov.u32 $r7, $r2;
	@$p2.eq bra l0x00001af8;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r12, constant0[$ofs1+0x0058];
	add.u32 $r5, $r0, constant0[$ofs1+0x0060];
	l0x00001a00: add.u32 $r13, $r7, 0x00000001;
	mov.u32 $r16, constant0[0x016c];
	mov.u32 $r0, $r13;
	callp l0x00002d70;
	mov.u32 $r14, $r0;
	mov.u32 $r23, constant0[0x016c];
	mov.u32 $r0, $r13;
	callp l0x00002e98;
	add.u32 $r15, $r14, 0xffffffff;
	set.ne.s32.s32 $p1/$o127, $r14, $r124;
	@$p1.equ mov.u32 $r13, constant1_Z6kernelv[0x000c];
	@$p1.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p1.equ add.u32 $r15, $r13, constant0[0x016c];
	add.u32 $r0, $r0, constant0[0x0184];
	mov.u32 $r13, constant0[0x015c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r14, $r13.lo, $r0.hi;
	mad.wide.u16 $r14, $r13.hi, $r0.lo, $r14;
	shl.u32 $r14, $r14, 0x00000010;
	mad.wide.u16 $r13, $r13.lo, $r0.lo, $r14;
	add.u32 $r0, $r15, constant0[0x017c];
	add.u32 $r0, $r13, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r12, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r5], $r0;
	add.u32 $r7, $r7, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	set.lt.s32.s32 $p1/$o127, $r7, constant0[0x0174];
	@$p1.ne bra l0x00001a00;
	l0x00001af8: nop;
	bar.sync 0x00000000;
	ssy 0x00001c30;
	mov.u32 $r7, $r2;
	@$p0.eq bra l0x00001c30;
	shl.u32 $r0, $r2, 0x00000002;
	mov.u32 $r12, constant0[$ofs1+0x0058];
	add.u32 $r5, $r0, constant0[$ofs1+0x0078];
	l0x00001b38: add.u32 $r13, $r7, 0x00000001;
	mov.u32 $r16, constant0[0x019c];
	mov.u32 $r0, $r13;
	callp l0x00002d70;
	mov.u32 $r14, $r0;
	mov.u32 $r23, constant0[0x019c];
	mov.u32 $r0, $r13;
	callp l0x00002e98;
	add.u32 $r15, $r14, 0xffffffff;
	set.ne.s32.s32 $p1/$o127, $r14, $r124;
	@$p1.equ mov.u32 $r13, constant1_Z6kernelv[0x000c];
	@$p1.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p1.equ add.u32 $r15, $r13, constant0[0x019c];
	add.u32 $r0, $r0, constant0[0x0194];
	mov.u32 $r13, constant0[0x015c];
	add.u32 $r0, $r0, 0xffffffff;
	mul.wide.u16 $r14, $r13.lo, $r0.hi;
	mad.wide.u16 $r14, $r13.hi, $r0.lo, $r14;
	shl.u32 $r14, $r14, 0x00000010;
	mad.wide.u16 $r13, $r13.lo, $r0.lo, $r14;
	add.u32 $r0, $r15, constant0[0x018c];
	add.u32 $r0, $r13, $r0;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r12, $r0;
	add.u32 $r0, $r0, 0xfffffffc;
	ld.global.u32 $r0, [$r0];
	st.global.u32 [$r5], $r0;
	add.u32 $r7, $r7, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	set.lt.s32.s32 $p1/$o127, $r7, constant0[0x01a4];
	@$p1.ne bra l0x00001b38;
	l0x00001c30: nop;
	bar.sync 0x00000000;
	ssy 0x00001cb0;
	mov.u32 $r0, $r2;
	@$p0.eq bra l0x00001cb0;
	shl.u32 $r5, $r2, 0x00000002;
	add.half.u32 $r7, $r5, constant0[$ofs1+0x0078];
	add.half.u32 $r5, $r5, constant0[$ofs1+0x0060];
	l0x00001c68: ld.global.u32 $r13, [$r5];
	ld.global.u32 $r12, [$r7];
	add.f32 $r12, $r13, -$r12;
	st.global.u32 [$r7], $r12;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r5, $r5, 0x00000400;
	add.u32 $r7, $r7, 0x00000400;
	set.lt.s32.s32 $p1/$o127, $r0, constant0[0x01a4];
	@$p1.ne bra l0x00001c68;
	l0x00001cb0: nop;
	bar.sync 0x00000000;
	ssy 0x00001d90;
	mov.u32 $r0, $r2;
	@$p0.eq bra l0x00001d90;
	mov.u32 $r5, constant0[0x00e4];
	shl.u32 $r7, $r2, 0x00000002;
	cvt.f32.s32 $r5, $r5;
	add.half.u32 $r13, $r7, constant0[$ofs1+0x0078];
	add.half.u32 $r14, $r7, constant0[$ofs1+0x0068];
	l0x00001cf8: ld.global.u32 $r15, [$r14];
	ld.global.u32 $r12, [$r13];
	mov.half.u32 $r7, $r5;
	mul.half.f32 $r15, $r15, $r15;
	set.abs.gt.f32.f32 $p1/$o127, $r5, constant1_Z6kernelv[0x0004];
	@$p1.neu mul.f32 $r15, $r15, constant1_Z6kernelv[0x0010];
	@$p1.neu mul.f32 $r7, $r7, constant1_Z6kernelv[0x0010];
	rcp.f32 $r7, $r7;
	mad.f32 $r12, -$r15, $r7, $r12;
	mov.u32 $r7, $r12;
	set.lt.f32.f32 $p1/$o127, $r12, $r124;
	@$p1.ne mov.u32 $r7, $r124;
	rsqrt.f32 $r7, $r7;
	rcp.f32 $r7, $r7;
	st.global.u32 [$r13], $r7;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r14, $r14, 0x00000400;
	add.u32 $r13, $r13, 0x00000400;
	set.lt.s32.s32 $p1/$o127, $r0, constant0[0x01a4];
	@$p1.ne bra l0x00001cf8;
	l0x00001d90: nop;
	bar.sync 0x00000000;
	ssy 0x00001e18;
	mov.u32 $r0, $r2;
	set.ge.s32.s32 $p1/$o127, $r2, constant0[0x01d4];
	@$p1.ne bra l0x00001e18;
	shl.u32 $r5, $r2, 0x00000002;
	add.u32 $r7, $r5, $r4;
	add.u32 $r5, $r5, constant0[$ofs1+0x0080];
	l0x00001dd8: ld.global.u32 $r12, [$r7];
	mul.f32 $r12, $r12, $r12;
	st.global.u32 [$r5], $r12;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r7, $r7, 0x00000400;
	add.u32 $r5, $r5, 0x00000400;
	set.lt.s32.s32 $p1/$o127, $r0, constant0[0x01d4];
	@$p1.ne bra l0x00001dd8;
	l0x00001e18: nop;
	bar.sync 0x00000000;
	ssy 0x00001f20;
	mov.u32 $r0, $r2;
	set.ge.s32.s32 $p1/$o127, $r2, constant0[0x00e0];
	@$p1.ne bra l0x00001f20;
	add.u32 $r5, $r2, 0x00000a2d;
	shl.b32 $ofs2, $r5, 0x00000002;
	set.lt.s32.s32 $p1/$o127, $r124, constant0[0x00dc];
	l0x00001e60: @$p1.eq bra l0x00001ef8;
	mov.u32 $r5, constant0[0x00dc];
	mul.wide.u16 $r7, $r0.lo, $r5.hi;
	mad.wide.u16 $r7, $r0.hi, $r5.lo, $r7;
	shl.u32 $r7, $r7, 0x00000010;
	mad.wide.u16 $r7, $r0.lo, $r5.lo, $r7;
	shl.u32 $r5, $r7, 0x00000002;
	ssy 0x00001ee8;
	mov.u32 $r13, $r124;
	add.u32 $r12, $r7, constant0[0x00dc];
	add.u32 $r5, $r4, $r5;
	l0x00001eb8: ld.global.u32 $r14, [$r5];
	add.u32 $r7, $r7, 0x00000001;
	add.f32 $r13, $r14, $r13;
	add.u32 $r5, $r5, 0x00000004;
	set.ne.s32.s32 $p2/$o127, $r7, $r12;
	@$p2.ne bra l0x00001eb8;
	nop;
	bra l0x00001f00;
	l0x00001ef8: mov.u32 $r13, $r124;
	l0x00001f00: mov.u32 s[$ofs2+=0x0400], $r13;
	add.u32 $r0, $r0, 0x00000100;
	set.lt.s32.s32 $p2/$o127, $r0, constant0[0x00e0];
	@$p2.ne bra l0x00001e60;
	l0x00001f20: nop;
	bar.sync 0x00000000;
	ssy 0x00002008;
	mov.u32 $r0, $r2;
	set.ge.s32.s32 $p1/$o127, $r2, constant0[0x01cc];
	@$p1.ne bra l0x00002008;
	add.u32 $r4, $r2, 0x00000a60;
	shl.b32 $ofs2, $r4, 0x00000002;
	mov.u32 $r4, $r2;
	set.lt.s32.s32 $p1/$o127, $r124, constant0[0x01d0];
	l0x00001f70: @$p1.eq bra l0x00001fd8;
	mov.u32 $r5, constant0[0x01cc];
	shl.u32 $r14, $r4, 0x00000002;
	mov.u32 $r12, $r124;
	mov.u32 $r13, $r124;
	shl.u32 $r7, $r5, 0x00000002;
	add.u32 $r5, $r14, constant0[$ofs1+0x0080];
	l0x00001fa8: ld.global.u32 $r14, [$r5];
	add.u32 $r13, $r13, 0x00000001;
	add.half.f32 $r12, $r14, $r12;
	add.half.u32 $r5, $r7, $r5;
	set.ne.s32.s32 $p2/$o127, $r13, constant0[0x01d0];
	@$p2.ne bra l0x00001fa8;
	bra l0x00001fe0;
	l0x00001fd8: mov.u32 $r12, $r124;
	l0x00001fe0: mov.u32 s[$ofs2+=0x0400], $r12;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r4, $r4, 0x00000100;
	set.lt.s32.s32 $p2/$o127, $r0, constant0[0x01cc];
	@$p2.ne bra l0x00001f70;
	l0x00002008: nop;
	bar.sync 0x00000000;
	ssy 0x00002120;
	set.eq.s32.s32 $p2/$r0, $r2, $r124;
	cvt.s32.s32 $p1|$o127, $r0;
	@$p2.eq bra l0x000020a8;
	mov.u32 $r0, $r124;
	set.ge.s32.s32 $p2/$o127, $r124, constant0[0x00e0];
	@$p2.ne bra l0x00002098;
	mov.u32 $r4, 0x000028b4;
	shl.b32 $ofs2, $r4, 0x0;
	mov.u32 $r4, $r124;
	l0x00002068: add.f32 $r0, s[$ofs2+=0x0004], $r0;
	add.u32 $r4, $r4, 0x00000001;
	set.ne.s32.s32 $p2/$o127, $r4, constant0[0x00e0];
	@$p2.ne bra l0x00002068;
	mov.u32 s[0x2e64], $r0;
	bra l0x00002120;
	l0x00002098: mov.u32 s[0x2e64], $r124;
	bra l0x00002120;
	l0x000020a8: set.ne.s32.s32 $p2/$o127, $r2, constant1_Z6kernelv[0x0000];
	@$p2.ne bra l0x00002120;
	mov.u32 $r0, $r124;
	set.ge.s32.s32 $p2/$o127, $r124, constant0[0x01d0];
	@$p2.ne bra l0x00002118;
	mov.u32 $r4, 0x00002980;
	shl.b32 $ofs2, $r4, 0x0;
	mov.u32 $r4, $r124;
	l0x000020e8: add.f32 $r0, s[$ofs2+=0x0004], $r0;
	add.u32 $r4, $r4, 0x00000001;
	set.ne.s32.s32 $p2/$o127, $r4, constant0[0x01d0];
	@$p2.ne bra l0x000020e8;
	mov.u32 s[0x2e68], $r0;
	bra l0x00002120;
	l0x00002118: mov.u32 s[0x2e68], $r124;
	l0x00002120: nop;
	bar.sync 0x00000000;
	ssy 0x000021f8;
	@$p1.eq bra l0x000021f8;
	mov.u32 $r0, constant0[0x00e4];
	add.u32 $ofs2, $ofs0, 0x00002e64;
	cvt.f32.s32 $r5, $r0;
	mov.half.u32 $r4, s[$ofs2+0x0000];
	mov.half.u32 $r0, $r5;
	set.abs.gt.f32.f32 $p2/$o127, $r5, constant1_Z6kernelv[0x0004];
	@$p2.neu mul.f32 $r4, $r4, constant1_Z6kernelv[0x0010];
	@$p2.neu mul.f32 $r5, $r5, constant1_Z6kernelv[0x0010];
	mov.u32 $r7, 0xffffffff;
	add.u32 $r7, $r7, constant0[0x00e4];
	cvt.f32.s32 $r7, $r7;
	rcp.f32 $r5, $r5;
	add.u32 $ofs2, $ofs0, 0x00002e68;
	rsqrt.f32 $r12, $r7;
	mul.half.f32 $r7, $r4, $r5;
	mov.half.u32 $r5, $r0;
	mov.half.u32 $r4, s[$ofs2+0x0000];
	rcp.half.f32 $r12, $r12;
	set.abs.gt.f32.f32 $p2/$o127, $r0, constant1_Z6kernelv[0x0004];
	@$p2.neu mul.f32 $r4, $r4, constant1_Z6kernelv[0x0010];
	@$p2.neu mul.f32 $r5, $r5, constant1_Z6kernelv[0x0010];
	rcp.half.f32 $r0, $r5;
	mul.half.f32 $r5, $r7, $r7;
	mad.f32 $r0, $r4, $r0, -$r5;
	rsqrt.f32 $r0, $r0;
	rcp.half.f32 $r0, $r0;
	mul.half.f32 $r0, $r12, $r0;
	mov.u32 s[0x2e6c], $r0;
	l0x000021f8: nop;
	bar.sync 0x00000000;
	ssy 0x00002270;
	mov.u32 $r0, $r2;
	@$p0.eq bra l0x00002270;
	shl.u32 $r4, $r2, 0x00000002;
	add.u32 $r4, $r4, constant0[$ofs1+0x0078];
	l0x00002230: ld.global.u32 $r5, [$r4];
	add.u32 $ofs2, $ofs0, 0x00002e6c;
	mul.f32 $r5, s[$ofs2+0x0000], $r5;
	st.global.u32 [$r4], $r5;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r4, $r4, 0x00000400;
	set.lt.s32.s32 $p2/$o127, $r0, constant0[0x01a4];
	@$p2.ne bra l0x00002230;
	l0x00002270: nop;
	bar.sync 0x00000000;
	ssy 0x00002338;
	mov.u32 $r0, $r2;
	mov.pred $p2, $r11;
	@$p2.eq bra l0x00002338;
	mov.u32 $r4, constant0[0x00e4];
	shl.u32 $r5, $r2, 0x00000002;
	cvt.f32.s32 $r4, $r4;
	add.half.u32 $r11, $r5, constant0[$ofs1+0x0038];
	add.half.u32 $r7, $r5, constant0[$ofs1+0x0068];
	l0x000022c0: ld.global.u32 $r13, [$r7];
	ld.global.u32 $r12, [$r11];
	add.u32 $ofs2, $ofs0, 0x00002e64;
	mov.half.u32 $r5, $r4;
	mul.half.f32 $r13, s[$ofs2+0x0000], $r13;
	set.abs.gt.f32.f32 $p2/$o127, $r4, constant1_Z6kernelv[0x0004];
	@$p2.neu mul.f32 $r13, $r13, constant1_Z6kernelv[0x0010];
	@$p2.neu mul.f32 $r5, $r5, constant1_Z6kernelv[0x0010];
	rcp.f32 $r5, $r5;
	mad.f32 $r5, -$r13, $r5, $r12;
	st.global.u32 [$r11], $r5;
	add.u32 $r0, $r0, 0x00000100;
	add.u32 $r7, $r7, 0x00000400;
	add.u32 $r11, $r11, 0x00000400;
	set.lt.s32.s32 $p2/$o127, $r0, constant0[0x0104];
	@$p2.ne bra l0x000022c0;
	l0x00002338: nop;
	bar.sync 0x00000000;
	ssy 0x000023d0;
	mov.u32 $r0, $r2;
	@$p0.eq bra l0x000023d0;
	shl.u32 $r4, $r2, 0x00000002;
	add.half.u32 $r5, $r4, constant0[$ofs1+0x0078];
	add.half.u32 $r4, $r4, constant0[$ofs1+0x0038];
	l0x00002370: ld.global.u32 $r11, [$r5];
	ld.global.u32 $r7, [$r4];
	set.abs.gt.f32.f32 $p0/$o127, $r11, constant1_Z6kernelv[0x0004];
	@$p0.neu mul.f32 $r7, $r7, constant1_Z6kernelv[0x0010];
	@$p0.neu mul.f32 $r11, $r11, constant1_Z6kernelv[0x0010];
	rcp.half.f32 $r11, $r11;
	mul.half.f32 $r7, $r7, $r11;
	add.u32 $r0, $r0, 0x00000100;
	st.global.u32 [$r5], $r7;
	set.lt.s32.s32 $p0/$o127, $r0, constant0[0x01a4];
	add.u32 $r4, $r4, 0x00000400;
	add.u32 $r5, $r5, 0x00000400;
	@$p0.ne bra l0x00002370;
	l0x000023d0: nop;
	bar.sync 0x00000000;
	ld.global.u32 $r0, [$r9];
	mov.u32 $r4, constant0[0x0020];
	mul.wide.u16 $r5, $r4.lo, $r6.hi;
	mad.wide.u16 $r5, $r4.hi, $r6.lo, $r5;
	shl.u32 $r5, $r5, 0x00000010;
	mad.wide.u16 $r4, $r4.lo, $r6.lo, $r5;
	add.u32 $r4, $r4, constant0[0x0008];
	shl.u32 $r4, $r4, 0x00000002;
	add.u32 $r7, $r4, constant0[$ofs1+0x0010];
	mov.u32 $r5, constant0[0x0014];
	add.u32 $r11, $r4, constant0[$ofs1+0x0018];
	add.u32 $r4, $r7, 0xfffffffc;
	ld.global.u32 $r6, [$r4];
	add.u32 $r12, $r5, constant0[0x0010];
	add.u32 $r4, $r11, 0xfffffffc;
	ld.global.u32 $r5, [$r4];
	ld.global.u32 $r4, [$r8];
	add.half.u32 $r6, $r6, $r12;
	add.half.u32 $r5, $r12, $r5;
	add.u32 $r6, $r6, -$r0;
	set.ge.s32.s32 $p0/$o127, $r2, constant0[0x01e4];
	add.u32 $r5, $r5, -$r4;
	ssy 0x00002520;
	mov.u32 $r0, $r2;
	@$p0.ne bra l0x00002520;
	mov.u32 $r4, constant0[0x01dc];
	mul.wide.u16 $r12, $r4.lo, $r5.hi;
	mad.wide.u16 $r12, $r4.hi, $r5.lo, $r12;
	shl.u32 $r12, $r12, 0x00000010;
	mad.wide.u16 $r5, $r4.lo, $r5.lo, $r12;
	shl.u32 $r4, $r2, 0x00000002;
	add.u32 $r5, $r5, $r6;
	add.u32 $r4, $r4, constant0[$ofs1+0x0088];
	l0x000024e0: set.eq.s32.s32 $r6, $r5, $r0;
	set.ne.s32.s32 $r6, $r6, $r124;
	cvt.abs.f32.s32 $r6, $r6;
	add.u32 $r0, $r0, 0x00000100;
	st.global.u32 [$r4], $r6;
	set.lt.s32.s32 $p0/$o127, $r0, constant0[0x01e4];
	add.u32 $r4, $r4, 0x00000400;
	@$p0.ne bra l0x000024e0;
	l0x00002520: nop;
	bar.sync 0x00000000;
	add.u32 $ofs2, $ofs0, 0x00000204;
	set.ge.s32.s32 $p0/$o127, $r2, constant0[$ofs2+0x0000];
	ssy 0x000027a0;
	mov.u32 $r5, $r2;
	@$p0.ne bra l0x000027a0;
	shl.u32 $r0, $r2, 0x00000002;
	add.u32 $r6, $r0, constant0[$ofs1+0x0098];
	add.u32 $r4, $r0, constant0[$ofs1+0x0078];
	l0x00002570: add.u32 $r12, $r5, 0x00000001;
	mov.u32 $r16, constant0[0x01fc];
	mov.u32 $r0, $r12;
	callp l0x00002d70;
	mov.u32 $r13, $r0;
	mov.u32 $r23, constant0[0x01fc];
	mov.u32 $r0, $r12;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r13, $r124;
	add.u32 $r12, $r0, 0x00000001;
	@$p0.equ mov.u32 $r13, constant0[0x01fc];
	@$p0.equ mov.u32 $r12, $r0;
	add.u32 $ofs2, $ofs0, 0x00000210;
	add.u32 $r0, $r12, constant0[$ofs2+0x0000];
	add.u32 $r12, $r0, 0x00000001;
	set.gt.s32.s32 $p0/$o127, $r12, constant0[0x01f0];
	mov.u32 $r12, 0x00000001;
	add.u32 $r14, $r0, -constant0[0x01f0];
	@$p0.ne add.u32 $r12, $r14, constant1_Z6kernelv[0x0000];
	set.gt.s32.s32 $p0/$o127, $r0, constant0[0x01e0];
	@$p0.ne mov.u32 $r0, constant0[0x01e0];
	set.lt.s32.s32 $p0/$o127, $r0, $r12;
	ssy 0x00002758;
	@$p0.ne bra l0x00002750;
	add.u32 $ofs2, $ofs0, 0x0000020c;
	add.u32 $r13, $r13, constant0[$ofs2+0x0000];
	add.u32 $r14, $r13, 0x00000001;
	set.gt.s32.s32 $p0/$o127, $r14, constant0[0x01ec];
	mov.u32 $r14, 0x00000001;
	add.u32 $r15, $r13, -constant0[0x01ec];
	@$p0.ne add.u32 $r14, $r15, constant1_Z6kernelv[0x0000];
	set.gt.s32.s32 $p0/$o127, $r13, constant0[0x01dc];
	@$p0.ne mov.u32 $r13, constant0[0x01dc];
	add.u32 $r15, $r0, 0x00000001;
	mov.u32 $r16, $r124;
	set.ge.s32.s32 $p0/$o127, $r13, $r14;
	l0x00002690: ssy 0x00002728;
	@$p0.eq bra l0x00002728;
	mov.u32 $r0, constant0[0x01dc];
	mul.wide.u16 $r17, $r12.lo, $r0.hi;
	mad.wide.u16 $r17, $r12.hi, $r0.lo, $r17;
	shl.u32 $r17, $r17, 0x00000010;
	mad.wide.u16 $r0, $r12.lo, $r0.lo, $r17;
	add.u32 $r18, $r13, 0x00000001;
	add.u32 $r17, $r0, -constant0[0x01dc];
	add.half.u32 $r0, $r17, $r18;
	add.half.u32 $r17, $r17, $r14;
	shl.u32 $r18, $r17, 0x00000002;
	add.u32 $r18, $r18, constant0[$ofs1+0x0088];
	l0x000026f0: add.u32 $r19, $r18, 0xfffffffc;
	ld.global.u32 $r19, [$r19];
	add.f32 $r16, $r19, $r16;
	add.u32 $r17, $r17, 0x00000001;
	add.u32 $r18, $r18, 0x00000004;
	set.ne.s32.s32 $p2/$o127, $r17, $r0;
	@$p2.ne bra l0x000026f0;
	l0x00002728: nop;
	add.u32 $r12, $r12, 0x00000001;
	set.ne.s32.s32 $p2/$o127, $r15, $r12;
	@$p2.ne bra l0x00002690;
	bra l0x00002758;
	l0x00002750: mov.u32 $r16, $r124;
	l0x00002758: ld.global.u32 $r0, [$r4];
	add.u32 $ofs2, $ofs0, 0x00000204;
	add.u32 $r5, $r5, 0x00000100;
	set.lt.s32.s32 $p0/$o127, $r5, constant0[$ofs2+0x0000];
	mul.f32 $r0, $r0, $r16;
	st.global.u32 [$r6], $r0;
	add.u32 $r4, $r4, 0x00000400;
	add.u32 $r6, $r6, 0x00000400;
	@$p0.ne bra l0x00002570;
	l0x000027a0: nop;
	bar.sync 0x00000000;
	set.ge.s32.s32 $p0/$o127, $r2, constant0[0x01fc];
	ssy 0x000028e0;
	mov.u32 $r0, $r2;
	@$p0.ne bra l0x000028e0;
	add.u32 $r4, $r2, 0x00000a93;
	add.u32 $r2, $r2, 0x00000b16;
	shl.b32 $ofs3, $r4, 0x00000002;
	add.u32 $ofs4, $ofs0, 0x00000200;
	shl.b32 $ofs2, $r2, 0x00000002;
	mov.u32 $r2, $r124;
	mov.u32 $r4, $r124;
	set.lt.s32.s32 $p0/$o127, $r124, constant0[$ofs4+0x0000];
	l0x00002810: @$p0.eq bra l0x000028b8;
	mov.u32 $r5, constant0[0x01fc];
	mul.wide.u16 $r6, $r0.lo, $r5.hi;
	mad.wide.u16 $r6, $r0.hi, $r5.lo, $r6;
	shl.u32 $r6, $r6, 0x00000010;
	mad.wide.u16 $r5, $r0.lo, $r5.lo, $r6;
	add.u32 $ofs4, $ofs0, 0x00000200;
	shl.u32 $r6, $r5, 0x00000002;
	ssy 0x000028b0;
	add.u32 $r13, $r5, constant0[$ofs4+0x0000];
	add.u32 $r12, $r6, constant0[$ofs1+0x0098];
	l0x00002868: ld.global.u32 $r14, [$r12];
	abs.f32 $r6, $r14;
	set.abs.gt.f32.f32 $p2/$o127, $r14, $r4;
	@$p2.neu mov.u32 $r2, $r5;
	@$p2.neu mov.u32 $r4, $r6;
	add.u32 $r5, $r5, 0x00000001;
	add.u32 $r12, $r12, 0x00000004;
	set.ne.s32.s32 $p2/$o127, $r5, $r13;
	@$p2.ne bra l0x00002868;
	nop;
	l0x000028b8: mov.u32 s[$ofs3+=0x0400], $r2;
	mov.u32 s[$ofs2+=0x0400], $r4;
	add.u32 $r0, $r0, 0x00000100;
	set.lt.s32.s32 $p2/$o127, $r0, constant0[0x01fc];
	@$p2.ne bra l0x00002810;
	l0x000028e0: nop;
	bar.sync 0x00000000;
	ssy 0x00002a60;
	@$p1.eq bra l0x00002a60;
	set.ge.s32.s32 $p0/$o127, $r124, constant0[0x01fc];
	@$p0.ne bra l0x00002990;
	mov.u32 $r0, 0x00002c58;
	shl.b32 $ofs1, $r0, 0x0;
	shl.b32 $ofs2, $r124, 0x0;
	mov.u32 $r4, $r124;
	mov.u32 $r0, $r124;
	mov.u32 $r2, $r124;
	l0x00002940: set.gt.f32.f32 $p0/$o127, s[$ofs1+0x0000], $r2;
	@$p0.neu add.u32 $ofs3, $ofs2, 0x00002a4c;
	@$p0.neu mov.u32 $r2, s[$ofs1+0x0000];
	@$p0.neu mov.u32 $r0, s[$ofs3+0x0000];
	add.u32 $r4, $r4, 0x00000001;
	set.ne.s32.s32 $p0/$o127, $r4, constant0[0x01fc];
	add.u32 $ofs1, $ofs1, 0x00000004;
	add.u32 $ofs2, $ofs2, 0x00000004;
	@$p0.ne bra l0x00002940;
	bra l0x00002998;
	l0x00002990: mov.u32 $r0, $r124;
	l0x00002998: add.u32 $r2, $r0, 0x00000001;
	mov.u32 $r16, constant0[0x01fc];
	mov.u32 $r0, $r2;
	callp l0x00002d70;
	mov.u32 $r4, $r0;
	mov.u32 $r23, constant0[0x01fc];
	mov.u32 $r0, $r2;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r4, $r124;
	add.u32 $r2, $r4, 0xffffffff;
	@$p0.equ mov.u32 $r2, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r2, $r2, constant0[0x01fc];
	ld.global.u32 $r4, [$r9];
	mov.u32 $r5, constant0[0x0010];
	add.u32 $r6, $r2, -constant0[0x00dc];
	add.half.u32 $r2, $r5, -constant0[0x0014];
	add.half.u32 $r5, $r6, -$r2;
	add.u32 $r4, $r4, $r5;
	add.u32 $r4, $r4, 0x00000001;
	add.u32 $r5, $r0, -constant0[0x00e0];
	st.global.u32 [$r7], $r4;
	ld.global.u32 $r0, [$r8];
	add.half.u32 $r2, -$r2, $r5;
	add.half.u32 $r0, $r0, $r2;
	add.u32 $r0, $r0, 0x00000001;
	st.global.u32 [$r11], $r0;
	l0x00002a60: nop;
	bar.sync 0x00000000;
	l0x00002a70: mov.u32 $r0, constant0[0x0008];
	mov.u32 $r4, 0xcccccccd;
	abs.u32 $r2, $r0;
	mul.wide.u16 $r0, $r2.lo, $r4.hi;
	mad.wide.u16 $p0|$r0, $r2.hi, $r4.lo, $r0;
	shl.u32 $r5, $r0, 0x00000010;
	shr.u32 $r0, $r0, 0x00000010;
	mad.wide.u16 $p1|$o127, $r2.lo, $r4.lo, $r5;
	@$p0.cf add.u32 $r0, $r0, constant1_Z6kernelv[0x0008];
	madp.wide.u16 $r0, $r2.hi, $r4.hi, $r0, $p1;
	shr.s32 $r0, $r0, 0x00000003;
	set.gt.s32.s32 $p0/$o127, $r124, constant0[0x0008];
	add.u32 $r2, -$r0, 0x00000000;
	@$p0.ne mov.u32 $r0, $r2;
	shl.u32 $r2, $r0, 0x00000003;
	shl.u32 $r0, $r0, 0x00000001;
	add.half.u32 $r0, $r2, $r0;
	add.half.u32 $r2, -$r0, constant0[0x0008];
	mov.u32 $r0, $r124;
	set.eq.s32.s32 $r2, $r2, $r124;
	mov.pred $p0, $r10;
	@$p0.ne mov.u32 $r0, constant1_Z6kernelv[0x0000];
	cvt.s32.s32 $r2, -$r2;
	and.b32 $p0|$o127, $r0, $r2;
	@$p0.eq retp;
	cvt.u32.u16 $r0, %ctaid.x;
	mul24.lo.u32 $r0, $r0, 0x000000a0;
	shl.b32 $ofs1, $r0, 0x0;
	mov.u32 $r2, constant0[0x0020];
	mov.u32 $r0, constant0[$ofs1+0x0240];
	mul.wide.u16 $r4, $r2.lo, $r0.hi;
	mad.wide.u16 $r4, $r2.hi, $r0.lo, $r4;
	shl.u32 $r4, $r4, 0x00000010;
	mad.wide.u16 $r0, $r2.lo, $r0.lo, $r4;
	add.u32 $r2, $r0, constant0[0x0008];
	mov.u32 $r0, constant0[$ofs1+0x0240];
	mov.u32 $r5, constant0[$ofs1+0x0228];
	shl.u32 $r6, $r2, 0x00000002;
	mov.u32 $r2, constant0[$ofs1+0x0218];
	shl.u32 $r4, $r0, 0x00000002;
	add.u32 $r0, $r5, $r6;
	ld.global.u32 $r0, [$r0];
	add.u32 $r5, $r4, $r2;
	mov.u32 $r7, constant0[$ofs1+0x0230];
	st.global.u32 [$r5], $r0;
	mov.u32 $r2, constant0[$ofs1+0x0220];
	add.u32 $r0, $r6, $r7;
	ld.global.u32 $r0, [$r0];
	add.u32 $r4, $r2, $r4;
	cvt.u32.u16 $r1, $r1.lo;
	set.ge.s32.s32 $p0/$o127, $r1, constant0[0x00e4];
	st.global.u32 [$r4], $r0;
	@$p0.ne retp;
	mov.u32 $r0, constant0[0x001c];
	shl.u32 $r2, $r1, 0x00000002;
	cvt.f32.f32 $r0, $r0;
	add.u32 $r3, $r3, $r2;
	add.f32 $r6, -$r0, 0x3f800000;
	l0x00002c38: add.u32 $r2, $r1, 0x00000001;
	mov.u32 $r16, constant0[0x00dc];
	mov.u32 $r0, $r2;
	callp l0x00002d70;
	mov.u32 $r7, $r0;
	mov.u32 $r23, constant0[0x00dc];
	mov.u32 $r0, $r2;
	callp l0x00002e98;
	set.ne.s32.s32 $p0/$o127, $r7, $r124;
	add.u32 $r8, $r7, 0xffffffff;
	@$p0.equ mov.u32 $r2, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r0, $r0, constant1_Z6kernelv[0x000c];
	@$p0.equ add.u32 $r8, $r2, constant0[0x00dc];
	ld.global.u32 $r2, [$r4];
	ld.global.u32 $r9, [$r5];
	ld.global.u32 $r7, [$r3];
	add.u32 $r2, $r2, $r0;
	mov.u32 $r0, constant0[0x0024];
	add.u32 $r2, $r2, 0xffffffe6;
	mul.wide.u16 $r10, $r0.lo, $r2.hi;
	mad.wide.u16 $r10, $r0.hi, $r2.lo, $r10;
	shl.u32 $r10, $r10, 0x00000010;
	add.u32 $r8, $r9, $r8;
	mad.wide.u16 $r0, $r0.lo, $r2.lo, $r10;
	add.u32 $r0, $r0, $r8;
	add.u32 $r0, $r0, 0xffffffe6;
	shl.u32 $r0, $r0, 0x00000002;
	add.u32 $r0, $r0, constant0[0x0000];
	ld.global.u32 $r0, [$r0];
	mul.f32 $r2, $r7, constant0[0x001c];
	cvt.f32.f32 $r2, $r2;
	cvt.f32.f32 $r0, $r0;
	mad.f32 $r0, $r0, $r6, $r2;
	add.u32 $r1, $r1, 0x00000100;
	st.global.u32 [$r3], $r0;
	set.lt.s32.s32 $p0/$o127, $r1, constant0[0x00e4];
	add.u32 $r3, $r3, 0x00000400;
	@$p0.ne bra l0x00002c38;
	retp;
	l0x00002d70: abs.u32 $r23, $r16;
	cvt.f32.u32 $r22, $r23;
	abs.u32 $r21, $r0;
	rcp.f32 $r20, $r22;
	cvt.rz.f32.u32 $r22, $r21;
	add.u32 $r20, $r20, 0xfffffffe;
	mul.rz.f32 $p3|$r22, $r22, $r20;
	cvt.rz.u32.f32 $r22, $r22;
	mul.wide.u16 $r19, $r23.lo, $r22.hi;
	mad.wide.u16 $r19, $r23.hi, $r22.lo, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r19, $r23.lo, $r22.lo, $r19;
	add.u32 $r19, $r21, -$r19;
	cvt.rz.f32.u32 $r19, $r19;
	mul.rz.f32 $p3|$r20, $r19, $r20;
	cvt.rz.u32.f32 $r20, $r20;
	add.u32 $r22, $r22, $r20;
	mul.wide.u16 $r20, $r22.hi, $r23.lo;
	mad.wide.u16 $r20, $r22.lo, $r23.hi, $r20;
	shl.u32 $r20, $r20, 0x00000010;
	mad.wide.u16 $r20, $r22.lo, $r23.lo, $r20;
	add.u32 $r20, -$r20, $r21;
	set.le.u32.u32 $r20, $r23, $r20;
	add.u32 $r22, -$r20, $r22;
	mul.wide.u16 $r20, $r22.hi, $r23.lo;
	mad.wide.u16 $r20, $r22.lo, $r23.hi, $r20;
	shl.u32 $r20, $r20, 0x00000010;
	mad.wide.u16 $r23, $r22.lo, $r23.lo, $r20;
	shr.u32 $r0, $r0, 0x0000001f;
	add.u32 $r22, -$r23, $r21;
	cvt.s32.s32 $r23, -$r0;
	xor.b32 $r23, $r23, $r22;
	set.ne.s32.s32 $p3/$o127, $r16, $r124;
	add.u32 $r0, $r0, $r23;
	@$p3.equ not.b32 $r0, $r16;
	retp;
	nop;
	l0x00002e98: abs.u32 $r22, $r23;
	cvt.f32.u32 $r21, $r22;
	abs.u32 $r20, $r0;
	rcp.f32 $r19, $r21;
	cvt.rz.f32.u32 $r21, $r20;
	add.u32 $r19, $r19, 0xfffffffe;
	mul.rz.f32 $p3|$r21, $r21, $r19;
	cvt.rz.u32.f32 $r21, $r21;
	mul.wide.u16 $r16, $r22.lo, $r21.hi;
	mad.wide.u16 $r16, $r22.hi, $r21.lo, $r16;
	shl.u32 $r16, $r16, 0x00000010;
	mad.wide.u16 $r16, $r22.lo, $r21.lo, $r16;
	add.u32 $r16, $r20, -$r16;
	cvt.rz.f32.u32 $r16, $r16;
	mul.rz.f32 $p3|$r19, $r16, $r19;
	cvt.rz.u32.f32 $r19, $r19;
	add.u32 $r21, $r21, $r19;
	mul.wide.u16 $r19, $r21.hi, $r22.lo;
	mad.wide.u16 $r19, $r21.lo, $r22.hi, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r19, $r21.lo, $r22.lo, $r19;
	add.u32 $r20, -$r19, $r20;
	set.le.u32.u32 $r22, $r22, $r20;
	xor.b32 $r0, $r23, $r0;
	shr.u32 $r0, $r0, 0x0000001f;
	add.u32 $r21, -$r22, $r21;
	cvt.s32.s32 $r22, -$r0;
	xor.b32 $r22, $r22, $r21;
	set.ne.s32.s32 $p3/$o127, $r23, $r124;
	add.u32 $r0, $r0, $r22;
	@$p3.equ not.b32 $r0, $r23;
	retp;
	nop;

	l_exit: exit;
}
//END INSTRUCTIONS
