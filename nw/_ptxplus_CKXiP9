//HEADER
.version 1.4+
.target sm_10, map_f64_to_f32
//END HEADER


//INSTRUCTIONS

.const .u32 constant1_Z20needle_cuda_shared_1PiS_iiii[2] = {
          0x00000010, 0xffffffff
};

.const .u32 constant1_Z20needle_cuda_shared_2PiS_iiii[2] = {
          0x00000010, 0xffffffff
};





.entry  _Z20needle_cuda_shared_2PiS_iiii (
	.param  .u64 __cudaparm__Z20needle_cuda_shared_2PiS_iiii_referrence ,
	.param  .u64 __cudaparm__Z20needle_cuda_shared_2PiS_iiii_matrix_cuda ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_2PiS_iiii_cols ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_2PiS_iiii_penalty ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_2PiS_iiii_i ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_2PiS_iiii_block_width )
{
	.reg .u32 $r<24>;
	.reg .u32 $ofs<5>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	cvt.u32.u16 $r2, %ctaid.x;
	add.half.u32 $r3, s[0x002c], -$r2;
	mov.half.u32 $r1, s[0x0020];
	add.u32 $r3, $r3, 0xffffffff;
	mul.wide.u16 $r4, $r3.lo, $r1.hi;
	mad.wide.u16 $r4, $r3.hi, $r1.lo, $r4;
	shl.u32 $r4, $r4, 0x00000010;
	add.u32 $r2, s[0x002c], $r2;
	mad.wide.u16 $r3, $r3.lo, $r1.lo, $r4;
	add.u32 $r2, -s[0x0028], $r2;
	add.u32 $r2, $r3, $r2;
	cvt.u32.u16 $r0, $r0.lo;
	shl.u32 $r20, $r2, 0x00000004;
	add.u32 $r19, $r20, $r0;
	shl.u32 $r16, s[0x0020], 0x00000001;
	add.half.u32 $r15, s[0x0020], $r19;
	add.half.u32 $r2, s[0x0020], $r16;
	shl.b32 $ofs1, $r0, 0x00000002;
	add.half.u32 $r4, s[0x0020], $r15;
	add.half.u32 $r3, $r15, $r16;
	add.u32 $r2, $r15, $r2;
	shl.u32 $r14, $r15, 0x00000002;
	shl.u32 $r13, $r4, 0x00000002;
	shl.u32 $r12, $r3, 0x00000002;
	shl.u32 $r11, $r2, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r14;
	add.half.u32 $r3, s[0x0010], $r13;
	add.half.u32 $r6, s[0x0010], $r12;
	add.half.u32 $r7, s[0x0010], $r11;
	add.u32 $r2, $r2, 0x00000004;
	ld.global.u32 $r5, [$r2];
	add.u32 $r2, $r3, 0x00000004;
	ld.global.u32 $r4, [$r2];
	add.u32 $r2, $r6, 0x00000004;
	ld.global.u32 $r3, [$r2];
	add.u32 $r2, $r7, 0x00000004;
	ld.global.u32 $r2, [$r2];
	mov.u32 s[$ofs1+0x0030], $r5;
	mov.u32 s[$ofs1+0x0070], $r4;
	mov.u32 s[$ofs1+0x00b0], $r3;
	shl.u32 $r18, s[0x0020], 0x00000002;
	shl.u32 $r17, s[0x0020], 0x00000003;
	mov.u32 s[$ofs1+0x00f0], $r2;
	add.half.u32 $r4, s[0x0020], $r18;
	add.half.u32 $r3, $r16, $r18;
	add.half.u32 $r2, -s[0x0020], $r17;
	add.half.u32 $r5, $r15, $r18;
	add.half.u32 $r4, $r15, $r4;
	add.half.u32 $r3, $r15, $r3;
	add.u32 $r2, $r15, $r2;
	shl.u32 $r10, $r5, 0x00000002;
	shl.u32 $r9, $r4, 0x00000002;
	shl.u32 $r8, $r3, 0x00000002;
	shl.u32 $r7, $r2, 0x00000002;
	add.half.u32 $r3, s[0x0010], $r10;
	add.half.u32 $r4, s[0x0010], $r9;
	add.half.u32 $r5, s[0x0010], $r8;
	add.half.u32 $r2, s[0x0010], $r7;
	add.u32 $r3, $r3, 0x00000004;
	ld.global.u32 $r3, [$r3];
	add.u32 $r4, $r4, 0x00000004;
	ld.global.u32 $r4, [$r4];
	add.u32 $r5, $r5, 0x00000004;
	ld.global.u32 $r6, [$r5];
	add.u32 $r2, $r2, 0x00000004;
	ld.global.u32 $r5, [$r2];
	mov.u32 $r2, 0x0000000b;
	mov.u32 s[$ofs1+0x0130], $r3;
	mul.wide.u16 $r3, $r1.lo, $r2.hi;
	mov.u32 s[$ofs1+0x0170], $r4;
	mad.wide.u16 $r3, $r1.hi, $r2.lo, $r3;
	mov.u32 s[$ofs1+0x01b0], $r6;
	shl.u32 $r3, $r3, 0x00000010;
	mov.u32 s[$ofs1+0x01f0], $r5;
	add.half.u32 $r5, s[0x0020], $r17;
	add.half.u32 $r4, $r16, $r17;
	mad.wide.u16 $r2, $r1.lo, $r2.lo, $r3;
	add.half.u32 $r6, $r15, $r17;
	add.half.u32 $r5, $r15, $r5;
	add.half.u32 $r3, $r15, $r4;
	add.half.u32 $r2, $r15, $r2;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r5, $r5, 0x00000002;
	shl.u32 $r4, $r3, 0x00000002;
	shl.u32 $r3, $r2, 0x00000002;
	add.half.u32 $r23, s[0x0010], $r6;
	add.half.u32 $r22, s[0x0010], $r5;
	add.half.u32 $r2, s[0x0010], $r4;
	add.half.u32 $r21, s[0x0010], $r3;
	add.u32 $r23, $r23, 0x00000004;
	ld.global.u32 $r23, [$r23];
	add.u32 $r22, $r22, 0x00000004;
	ld.global.u32 $r22, [$r22];
	add.u32 $r2, $r2, 0x00000004;
	ld.global.u32 $r2, [$r2];
	add.u32 $r21, $r21, 0x00000004;
	ld.global.u32 $r21, [$r21];
	mov.u32 s[$ofs1+0x0230], $r23;
	mov.u32 s[$ofs1+0x0270], $r22;
	add.u32 $r17, $r17, $r18;
	mov.u32 s[$ofs1+0x02b0], $r2;
	mov.u32 $r2, 0x0000000d;
	mul.wide.u16 $r18, $r1.lo, $r2.hi;
	mad.wide.u16 $r18, $r1.hi, $r2.lo, $r18;
	mov.u32 s[$ofs1+0x02f0], $r21;
	shl.u32 $r21, $r18, 0x00000010;
	shl.u32 $r18, s[0x0020], 0x00000004;
	mad.wide.u16 $r21, $r1.lo, $r2.lo, $r21;
	add.half.u32 $r2, $r18, -$r16;
	add.half.u32 $r1, -s[0x0020], $r18;
	add.half.u32 $r17, $r15, $r17;
	add.half.u32 $r16, $r15, $r21;
	add.half.u32 $r2, $r15, $r2;
	add.half.u32 $r1, $r15, $r1;
	shl.u32 $r18, $r17, 0x00000002;
	shl.u32 $r17, $r16, 0x00000002;
	shl.u32 $r16, $r2, 0x00000002;
	shl.u32 $r15, $r1, 0x00000002;
	add.half.u32 $r2, s[0x0010], $r18;
	add.half.u32 $r22, s[0x0010], $r17;
	add.half.u32 $r21, s[0x0010], $r16;
	add.half.u32 $r1, s[0x0010], $r15;
	add.u32 $r2, $r2, 0x00000004;
	ld.global.u32 $r2, [$r2];
	add.u32 $r22, $r22, 0x00000004;
	ld.global.u32 $r22, [$r22];
	add.u32 $r21, $r21, 0x00000004;
	ld.global.u32 $r21, [$r21];
	add.u32 $r1, $r1, 0x00000004;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0330], $r2;
	mov.u32 s[$ofs1+0x0370], $r22;
	mov.u32 s[$ofs1+0x03b0], $r21;
	mov.u32 s[$ofs1+0x03f0], $r1;
	bar.sync 0x00000000;
	shl.u32 $r1, $r0, 0x00000006;
	shl.u32 $r2, $r0, 0x00000002;
	add.u32 $r1, $r1, $r2;
	set.ne.s32.s32 $p0/$o127, $r0, $r124;
	shl.b32 $ofs2, $r1, 0x0;
	@$p0.equ shl.u32 $r1, $r20, 0x00000002;
	@$p0.equ add.u32 $r1, s[0x0018], $r1;
	@$p0.equ ld.global.u32 $r1, [$r1];
	@$p0.equ mov.u32 s[$ofs2+0x0430], $r1;
	mov.u32 $r1, s[0x0020];
	mul.wide.u16 $r2, $r1.lo, $r0.hi;
	mad.wide.u16 $r2, $r1.hi, $r0.lo, $r2;
	shl.u32 $r2, $r2, 0x00000010;
	mad.wide.u16 $r2, $r1.lo, $r0.lo, $r2;
	add.half.u32 $r1, s[0x0020], $r20;
	add.half.u32 $r1, $r2, $r1;
	shl.u32 $r1, $r1, 0x00000002;
	add.u32 $r1, s[0x0018], $r1;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs2+0x0474], $r1;
	bar.sync 0x00000000;
	shl.u32 $r1, $r19, 0x00000002;
	add.u32 $r1, s[0x0018], $r1;
	add.u32 $r1, $r1, 0x00000004;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0434], $r1;
	add.u32 $ofs1, $ofs1, 0x00000430;
	bar.sync 0x00000000;
	mov.u32 $r19, $r124;
	l0x00000478: set.lt.s32.s32 $p0/$o127, $r19, $r0;
	ssy 0x00000510;
	@$p0.ne bra l0x00000510;
	add.u32 $r1, $r19, -$r0;
	mul24.lo.u32 $r2, $r1, 0x00000011;
	shl.u32 $r20, $r1, 0x00000004;
	add.half.u32 $r1, $r0, $r2;
	add.half.u32 $r2, $r0, $r20;
	shl.b32 $ofs2, $r1, 0x00000002;
	shl.b32 $ofs4, $r2, 0x00000002;
	add.u32 $ofs3, $ofs2, 0x00000430;
	mov.u32 $r1, s[$ofs4+0x0030];
	mov.half.u32 $r2, s[0x0024];
	add.half.u32 $r1, s[$ofs3+0x0000], $r1;
	add.u32 $r2, s[$ofs3+0x0044], -$r2;
	set.le.s32.s32 $p0/$o127, $r1, $r2;
	@$p0.ne mov.u32 $r1, $r2;
	mov.half.u32 $r2, s[0x0024];
	add.half.u32 $r2, s[$ofs3+0x0004], -$r2;
	set.le.s32.s32 $p0/$o127, $r1, $r2;
	@$p0.ne mov.u32 $r1, $r2;
	mov.u32 s[$ofs2+0x0478], $r1;
	l0x00000510: nop;
	bar.sync 0x00000000;
	add.u32 $r19, $r19, 0x00000001;
	set.ne.s32.s32 $p0/$o127, $r19, constant1_Z20needle_cuda_shared_2PiS_iiii[0x0000];
	@$p0.ne bra l0x00000478;
	mov.u32 $r19, 0x0000000e;
	l0x00000540: set.lt.s32.s32 $p0/$o127, $r19, $r0;
	ssy 0x000005e8;
	@$p0.ne bra l0x000005e8;
	add.u32 $r2, -$r0, 0x00000010;
	add.u32 $r1, $r0, -$r19;
	mul24.lo.u32 $r20, $r2, 0x00000011;
	shl.u32 $r21, $r2, 0x00000004;
	add.half.u32 $r2, $r1, $r20;
	add.half.u32 $r1, $r1, $r21;
	shl.b32 $ofs2, $r2, 0x00000002;
	shl.b32 $ofs4, $r1, 0x00000002;
	add.u32 $ofs3, $ofs2, 0x00000428;
	mov.u32 $r1, s[$ofs4+0x002c];
	mov.half.u32 $r2, s[0x0024];
	add.half.u32 $r1, s[$ofs3+0x0000], $r1;
	add.u32 $r20, s[$ofs3+0x0044], -$r2;
	mov.u32 $r2, s[0x0024];
	set.le.s32.s32 $p0/$o127, $r1, $r20;
	@$p0.ne mov.u32 $r1, $r20;
	add.u32 $r2, s[$ofs3+0x0004], -$r2;
	set.le.s32.s32 $p0/$o127, $r1, $r2;
	@$p0.ne mov.u32 $r1, $r2;
	mov.u32 s[$ofs2+0x0470], $r1;
	l0x000005e8: nop;
	bar.sync 0x00000000;
	add.u32 $r19, $r19, 0xffffffff;
	set.ne.s32.s32 $p0/$o127, $r19, constant1_Z20needle_cuda_shared_2PiS_iiii[0x0004];
	@$p0.ne bra l0x00000540;
	add.u32 $r1, s[0x0018], $r14;
	mov.u32 $r0, s[$ofs1+0x0048];
	add.u32 $r1, $r1, 0x00000004;
	add.u32 $r2, s[0x0018], $r13;
	add.u32 $ofs2, $ofs1, 0x0000008c;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r12;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r11;
	add.u32 $ofs2, $ofs1, 0x00000114;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r10;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r9;
	add.u32 $ofs2, $ofs1, 0x0000019c;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r8;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r7;
	add.u32 $ofs2, $ofs1, 0x00000224;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r6;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r5;
	add.u32 $ofs2, $ofs1, 0x000002ac;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r4;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r3;
	add.u32 $ofs2, $ofs1, 0x00000334;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r18;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r17;
	add.u32 $ofs2, $ofs1, 0x000003bc;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r16;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r15;
	add.u32 $ofs1, $ofs1, 0x00000444;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs1+0x0000];
	st.global.u32 [$r1], $r0;

	l_exit: exit;
}

.entry  _Z20needle_cuda_shared_1PiS_iiii (
	.param  .u64 __cudaparm__Z20needle_cuda_shared_1PiS_iiii_referrence ,
	.param  .u64 __cudaparm__Z20needle_cuda_shared_1PiS_iiii_matrix_cuda ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_1PiS_iiii_cols ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_1PiS_iiii_penalty ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_1PiS_iiii_i ,
	.param  .s32 __cudaparm__Z20needle_cuda_shared_1PiS_iiii_block_width )
{
	.reg .u32 $r<24>;
	.reg .u32 $ofs<4>;
	.reg .pred $p<4>;

	.reg .u32 $r124;

	.reg .u32 $o127;

	
	cvt.u32.u16 $r4, %ctaid.x;
	add.half.u32 $r2, s[0x0028], -$r4;
	mov.half.u32 $r1, s[0x0020];
	add.u32 $r5, $r2, 0xffffffff;
	mul.wide.u16 $r2, $r5.lo, $r1.hi;
	cvt.u32.u16 $p0|$r0, $r0.lo;
	mad.wide.u16 $r3, $r5.hi, $r1.lo, $r2;
	shl.u32 $r2, $r0, 0x00000006;
	shl.u32 $r6, $r3, 0x00000010;
	shl.u32 $r3, $r0, 0x00000002;
	mad.wide.u16 $r5, $r5.lo, $r1.lo, $r6;
	add.half.u32 $r1, $r2, $r3;
	add.half.u32 $r3, $r5, $r4;
	shl.b32 $ofs2, $r1, 0x0;
	mov.u32 $r2, $r0;
	shl.u32 $r20, $r3, 0x00000004;
	@$p0.equ shl.u32 $r1, $r20, 0x00000002;
	@$p0.equ add.u32 $r1, s[0x0018], $r1;
	@$p0.equ ld.global.u32 $r1, [$r1];
	@$p0.equ mov.u32 s[$ofs2+0x0030], $r1;
	add.half.u32 $r21, $r20, $r0;
	add.half.u32 $r17, s[0x0020], $r21;
	add.u32 $r1, s[0x0020], $r17;
	shl.u32 $r15, $r17, 0x00000002;
	shl.u32 $r14, $r1, 0x00000002;
	add.half.u32 $r1, s[0x0010], $r15;
	add.half.u32 $r4, s[0x0010], $r14;
	add.u32 $r1, $r1, 0x00000004;
	ld.global.u32 $r3, [$r1];
	shl.b32 $ofs1, $r2, 0x00000002;
	add.u32 $r1, $r4, 0x00000004;
	ld.global.u32 $r1, [$r1];
	shl.u32 $r16, s[0x0020], 0x00000001;
	add.u32 $r4, s[0x0020], $r16;
	shl.u32 $r19, s[0x0020], 0x00000002;
	add.half.u32 $r6, $r17, $r16;
	add.half.u32 $r5, $r17, $r4;
	add.u32 $r4, $r17, $r19;
	shl.u32 $r13, $r6, 0x00000002;
	shl.u32 $r12, $r5, 0x00000002;
	shl.u32 $r11, $r4, 0x00000002;
	add.u32 $r4, s[0x0010], $r13;
	mov.u32 s[$ofs1+0x04b4], $r3;
	add.half.u32 $r5, s[0x0010], $r12;
	add.half.u32 $r6, s[0x0010], $r11;
	add.u32 $r3, $r4, 0x00000004;
	ld.global.u32 $r4, [$r3];
	mov.u32 s[$ofs1+0x04f4], $r1;
	add.u32 $r1, $r5, 0x00000004;
	ld.global.u32 $r3, [$r1];
	add.u32 $r1, $r6, 0x00000004;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0534], $r4;
	shl.u32 $r18, s[0x0020], 0x00000003;
	mov.u32 s[$ofs1+0x0574], $r3;
	add.half.u32 $r5, s[0x0020], $r19;
	add.half.u32 $r4, $r16, $r19;
	add.u32 $r3, -s[0x0020], $r18;
	mov.u32 s[$ofs1+0x05b4], $r1;
	add.half.u32 $r5, $r17, $r5;
	add.half.u32 $r4, $r17, $r4;
	add.half.u32 $r3, $r17, $r3;
	add.half.u32 $r1, $r17, $r18;
	shl.u32 $r10, $r5, 0x00000002;
	shl.u32 $r9, $r4, 0x00000002;
	shl.u32 $r8, $r3, 0x00000002;
	shl.u32 $r7, $r1, 0x00000002;
	add.half.u32 $r3, s[0x0010], $r10;
	add.half.u32 $r4, s[0x0010], $r9;
	add.half.u32 $r5, s[0x0010], $r8;
	add.half.u32 $r1, s[0x0010], $r7;
	add.u32 $r3, $r3, 0x00000004;
	ld.global.u32 $r3, [$r3];
	add.u32 $r4, $r4, 0x00000004;
	ld.global.u32 $r6, [$r4];
	add.u32 $r4, $r5, 0x00000004;
	ld.global.u32 $r4, [$r4];
	add.u32 $r1, $r1, 0x00000004;
	ld.global.u32 $r5, [$r1];
	mov.u32 s[$ofs1+0x05f4], $r3;
	mov.u32 s[$ofs1+0x0634], $r6;
	mov.u32 $r1, s[0x0020];
	mov.u32 $r3, 0x0000000b;
	mul.wide.u16 $r6, $r1.lo, $r3.hi;
	mad.wide.u16 $r6, $r1.hi, $r3.lo, $r6;
	mov.u32 s[$ofs1+0x0674], $r4;
	shl.u32 $r4, $r6, 0x00000010;
	add.u32 $r6, s[0x0020], $r18;
	mov.u32 s[$ofs1+0x06b4], $r5;
	add.u32 $r5, $r16, $r18;
	mad.wide.u16 $r3, $r1.lo, $r3.lo, $r4;
	add.half.u32 $r6, $r17, $r6;
	add.half.u32 $r4, $r17, $r5;
	add.u32 $r3, $r17, $r3;
	shl.u32 $r6, $r6, 0x00000002;
	shl.u32 $r5, $r4, 0x00000002;
	shl.u32 $r4, $r3, 0x00000002;
	add.half.u32 $r22, s[0x0010], $r6;
	add.half.u32 $r3, s[0x0010], $r5;
	add.u32 $r23, s[0x0010], $r4;
	add.u32 $r22, $r22, 0x00000004;
	ld.global.u32 $r22, [$r22];
	add.u32 $r3, $r3, 0x00000004;
	ld.global.u32 $r3, [$r3];
	add.u32 $r23, $r23, 0x00000004;
	ld.global.u32 $r23, [$r23];
	mov.u32 s[$ofs1+0x06f4], $r22;
	add.u32 $r18, $r18, $r19;
	mov.u32 s[$ofs1+0x0734], $r3;
	mov.u32 s[$ofs1+0x0774], $r23;
	mov.u32 $r3, 0x0000000d;
	mul.wide.u16 $r19, $r1.lo, $r3.hi;
	mad.wide.u16 $r19, $r1.hi, $r3.lo, $r19;
	shl.u32 $r19, $r19, 0x00000010;
	mad.wide.u16 $r1, $r1.lo, $r3.lo, $r19;
	shl.u32 $r3, s[0x0020], 0x00000004;
	add.half.u32 $r16, $r3, -$r16;
	add.half.u32 $r3, -s[0x0020], $r3;
	add.half.u32 $r18, $r17, $r18;
	add.half.u32 $r16, $r17, $r16;
	add.half.u32 $r3, $r17, $r3;
	add.half.u32 $r1, $r17, $r1;
	shl.u32 $r19, $r18, 0x00000002;
	shl.u32 $r17, $r16, 0x00000002;
	shl.u32 $r16, $r3, 0x00000002;
	shl.u32 $r18, $r1, 0x00000002;
	add.half.u32 $r1, s[0x0010], $r19;
	add.half.u32 $r22, s[0x0010], $r17;
	add.half.u32 $r23, s[0x0010], $r16;
	add.half.u32 $r3, s[0x0010], $r18;
	add.u32 $r1, $r1, 0x00000004;
	ld.global.u32 $r1, [$r1];
	add.u32 $r22, $r22, 0x00000004;
	ld.global.u32 $r22, [$r22];
	add.u32 $r23, $r23, 0x00000004;
	ld.global.u32 $r23, [$r23];
	add.u32 $r3, $r3, 0x00000004;
	ld.global.u32 $r3, [$r3];
	mov.u32 s[$ofs1+0x07b4], $r1;
	mov.u32 s[$ofs1+0x07f4], $r3;
	mov.u32 s[$ofs1+0x0834], $r22;
	mov.u32 s[$ofs1+0x0874], $r23;
	bar.sync 0x00000000;
	mov.u32 $r1, s[0x0020];
	mul.wide.u16 $r3, $r1.lo, $r0.hi;
	mad.wide.u16 $r3, $r1.hi, $r0.lo, $r3;
	shl.u32 $r3, $r3, 0x00000010;
	mad.wide.u16 $r3, $r1.lo, $r0.lo, $r3;
	add.half.u32 $r1, s[0x0020], $r20;
	add.half.u32 $r1, $r3, $r1;
	shl.u32 $r1, $r1, 0x00000002;
	add.u32 $r1, s[0x0018], $r1;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs2+0x0074], $r1;
	bar.sync 0x00000000;
	shl.u32 $r1, $r21, 0x00000002;
	add.u32 $r1, s[0x0018], $r1;
	add.u32 $r1, $r1, 0x00000004;
	ld.global.u32 $r1, [$r1];
	mov.u32 s[$ofs1+0x0034], $r1;
	bar.sync 0x00000000;
	mov.u32 $r20, $r124;
	l0x00000478: set.lt.s32.s32 $p0/$o127, $r20, $r0;
	ssy 0x00000518;
	@$p0.ne bra l0x00000518;
	add.u32 $r1, $r20, -$r0;
	shl.u32 $r3, $r1, 0x00000004;
	add.u32 $r3, $r2, $r3;
	mul24.lo.u32 $r1, $r1, 0x00000011;
	shl.b32 $ofs2, $r3, 0x00000002;
	add.u32 $r1, $r2, $r1;
	add.u32 $ofs3, $ofs2, 0x000004b4;
	shl.b32 $ofs2, $r1, 0x00000002;
	mov.half.u32 $r1, s[0x0024];
	mov.half.u32 $r3, s[$ofs3+0x0000];
	add.u32 $r21, s[$ofs2+0x0074], -$r1;
	add.u32 $r1, s[$ofs2+0x0030], $r3;
	set.le.s32.s32 $p0/$o127, $r1, $r21;
	@$p0.ne mov.u32 $r1, $r21;
	mov.half.u32 $r3, s[0x0024];
	add.half.u32 $r3, s[$ofs2+0x0034], -$r3;
	set.le.s32.s32 $p0/$o127, $r1, $r3;
	@$p0.ne mov.u32 $r1, $r3;
	mov.u32 s[$ofs2+0x0078], $r1;
	l0x00000518: nop;
	bar.sync 0x00000000;
	add.u32 $r20, $r20, 0x00000001;
	set.ne.s32.s32 $p0/$o127, $r20, constant1_Z20needle_cuda_shared_1PiS_iiii[0x0000];
	@$p0.ne bra l0x00000478;
	mov.u32 $r3, 0x0000000e;
	l0x00000548: set.lt.s32.s32 $p0/$o127, $r3, $r0;
	ssy 0x000005f0;
	@$p0.ne bra l0x000005f0;
	add.u32 $r2, -$r0, 0x00000010;
	add.u32 $r1, $r0, -$r3;
	shl.u32 $r20, $r2, 0x00000004;
	add.u32 $r20, $r1, $r20;
	mul24.lo.u32 $r2, $r2, 0x00000011;
	shl.b32 $ofs2, $r20, 0x00000002;
	add.u32 $r1, $r1, $r2;
	add.u32 $ofs3, $ofs2, 0x000004b0;
	shl.b32 $ofs2, $r1, 0x00000002;
	mov.half.u32 $r1, s[0x0024];
	mov.half.u32 $r2, s[$ofs3+0x0000];
	add.u32 $r20, s[$ofs2+0x006c], -$r1;
	add.half.u32 $r1, s[$ofs2+0x0028], $r2;
	mov.half.u32 $r2, s[0x0024];
	set.le.s32.s32 $p0/$o127, $r1, $r20;
	@$p0.ne mov.u32 $r1, $r20;
	add.u32 $r2, s[$ofs2+0x002c], -$r2;
	set.le.s32.s32 $p0/$o127, $r1, $r2;
	@$p0.ne mov.u32 $r1, $r2;
	mov.u32 s[$ofs2+0x0070], $r1;
	l0x000005f0: nop;
	bar.sync 0x00000000;
	add.u32 $r3, $r3, 0xffffffff;
	set.ne.s32.s32 $p0/$o127, $r3, constant1_Z20needle_cuda_shared_1PiS_iiii[0x0004];
	@$p0.ne bra l0x00000548;
	add.u32 $r1, s[0x0018], $r15;
	mov.u32 $r0, s[$ofs1+0x0078];
	add.u32 $r1, $r1, 0x00000004;
	add.u32 $r2, s[0x0018], $r14;
	add.u32 $ofs2, $ofs1, 0x000000bc;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r13;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r12;
	add.u32 $ofs2, $ofs1, 0x00000144;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r11;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r10;
	add.u32 $ofs2, $ofs1, 0x000001cc;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r9;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r8;
	add.u32 $ofs2, $ofs1, 0x00000254;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r7;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r6;
	add.u32 $ofs2, $ofs1, 0x000002dc;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r5;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r4;
	add.u32 $ofs2, $ofs1, 0x00000364;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r19;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r18;
	add.u32 $ofs2, $ofs1, 0x000003ec;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.half.u32 $r0, s[$ofs2+0x0000];
	add.half.u32 $r2, s[0x0018], $r17;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs2+0x0044];
	add.u32 $r2, s[0x0018], $r16;
	add.u32 $ofs1, $ofs1, 0x00000474;
	st.global.u32 [$r1], $r0;
	add.u32 $r1, $r2, 0x00000004;
	mov.u32 $r0, s[$ofs1+0x0000];
	st.global.u32 [$r1], $r0;

	l_exit: exit;
}
//END INSTRUCTIONS
